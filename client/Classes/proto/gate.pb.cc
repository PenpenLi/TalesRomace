// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PGateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PGateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PNodeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PNodeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PGateItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PGateItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PUpdateGates_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PUpdateGates_reflection_ = NULL;
const ::google::protobuf::Descriptor* PUpdateNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PUpdateNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* PUpdateNodes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PUpdateNodes_reflection_ = NULL;
const ::google::protobuf::Descriptor* PGateResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PGateResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PNodeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PNodeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PNodeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PNodeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PNpcRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PNpcRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* PItemRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PItemRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* PResultReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PResultReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PResultResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PResultResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gate_2eproto() {
  protobuf_AddDesc_gate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gate.proto");
  GOOGLE_CHECK(file != NULL);
  PGateReq_descriptor_ = file->message_type(0);
  static const int PGateReq_offsets_[1] = {
  };
  PGateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PGateReq_descriptor_,
      PGateReq::default_instance_,
      PGateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PGateReq));
  PNodeItem_descriptor_ = file->message_type(1);
  static const int PNodeItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNodeItem, xid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNodeItem, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNodeItem, times_),
  };
  PNodeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PNodeItem_descriptor_,
      PNodeItem::default_instance_,
      PNodeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNodeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNodeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PNodeItem));
  PGateItem_descriptor_ = file->message_type(2);
  static const int PGateItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGateItem, islock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGateItem, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGateItem, items_),
  };
  PGateItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PGateItem_descriptor_,
      PGateItem::default_instance_,
      PGateItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGateItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGateItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PGateItem));
  PUpdateGates_descriptor_ = file->message_type(3);
  static const int PUpdateGates_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUpdateGates, gates_),
  };
  PUpdateGates_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PUpdateGates_descriptor_,
      PUpdateGates::default_instance_,
      PUpdateGates_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUpdateGates, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUpdateGates, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PUpdateGates));
  PUpdateNode_descriptor_ = file->message_type(4);
  static const int PUpdateNode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUpdateNode, nodeitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUpdateNode, type_),
  };
  PUpdateNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PUpdateNode_descriptor_,
      PUpdateNode::default_instance_,
      PUpdateNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUpdateNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUpdateNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PUpdateNode));
  PUpdateNodes_descriptor_ = file->message_type(5);
  static const int PUpdateNodes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUpdateNodes, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUpdateNodes, nodeitems_),
  };
  PUpdateNodes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PUpdateNodes_descriptor_,
      PUpdateNodes::default_instance_,
      PUpdateNodes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUpdateNodes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUpdateNodes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PUpdateNodes));
  PGateResp_descriptor_ = file->message_type(6);
  static const int PGateResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGateResp, gates_),
  };
  PGateResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PGateResp_descriptor_,
      PGateResp::default_instance_,
      PGateResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGateResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGateResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PGateResp));
  PNodeReq_descriptor_ = file->message_type(7);
  static const int PNodeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNodeReq, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNodeReq, xid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNodeReq, groupid_),
  };
  PNodeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PNodeReq_descriptor_,
      PNodeReq::default_instance_,
      PNodeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNodeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNodeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PNodeReq));
  PNodeResp_descriptor_ = file->message_type(8);
  static const int PNodeResp_offsets_[1] = {
  };
  PNodeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PNodeResp_descriptor_,
      PNodeResp::default_instance_,
      PNodeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNodeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNodeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PNodeResp));
  PNpcRes_descriptor_ = file->message_type(9);
  static const int PNpcRes_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNpcRes, xid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNpcRes, addlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNpcRes, addexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNpcRes, curlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNpcRes, curexp_),
  };
  PNpcRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PNpcRes_descriptor_,
      PNpcRes::default_instance_,
      PNpcRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNpcRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNpcRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PNpcRes));
  PItemRes_descriptor_ = file->message_type(10);
  static const int PItemRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PItemRes, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PItemRes, itemnum_),
  };
  PItemRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PItemRes_descriptor_,
      PItemRes::default_instance_,
      PItemRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PItemRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PItemRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PItemRes));
  PResultReq_descriptor_ = file->message_type(11);
  static const int PResultReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PResultReq, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PResultReq, xid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PResultReq, star_),
  };
  PResultReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PResultReq_descriptor_,
      PResultReq::default_instance_,
      PResultReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PResultReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PResultReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PResultReq));
  PResultResp_descriptor_ = file->message_type(12);
  static const int PResultResp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PResultResp, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PResultResp, grouplvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PResultResp, curgrouplvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PResultResp, groupexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PResultResp, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PResultResp, npcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PResultResp, items_),
  };
  PResultResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PResultResp_descriptor_,
      PResultResp::default_instance_,
      PResultResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PResultResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PResultResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PResultResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PGateReq_descriptor_, &PGateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PNodeItem_descriptor_, &PNodeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PGateItem_descriptor_, &PGateItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PUpdateGates_descriptor_, &PUpdateGates::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PUpdateNode_descriptor_, &PUpdateNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PUpdateNodes_descriptor_, &PUpdateNodes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PGateResp_descriptor_, &PGateResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PNodeReq_descriptor_, &PNodeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PNodeResp_descriptor_, &PNodeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PNpcRes_descriptor_, &PNpcRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PItemRes_descriptor_, &PItemRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PResultReq_descriptor_, &PResultReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PResultResp_descriptor_, &PResultResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gate_2eproto() {
  delete PGateReq::default_instance_;
  delete PGateReq_reflection_;
  delete PNodeItem::default_instance_;
  delete PNodeItem_reflection_;
  delete PGateItem::default_instance_;
  delete PGateItem_reflection_;
  delete PUpdateGates::default_instance_;
  delete PUpdateGates_reflection_;
  delete PUpdateNode::default_instance_;
  delete PUpdateNode_reflection_;
  delete PUpdateNodes::default_instance_;
  delete PUpdateNodes_reflection_;
  delete PGateResp::default_instance_;
  delete PGateResp_reflection_;
  delete PNodeReq::default_instance_;
  delete PNodeReq_reflection_;
  delete PNodeResp::default_instance_;
  delete PNodeResp_reflection_;
  delete PNpcRes::default_instance_;
  delete PNpcRes_reflection_;
  delete PItemRes::default_instance_;
  delete PItemRes_reflection_;
  delete PResultReq::default_instance_;
  delete PResultReq_reflection_;
  delete PResultResp::default_instance_;
  delete PResultResp_reflection_;
}

void protobuf_AddDesc_gate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ngate.proto\"\n\n\010PGateReq\"5\n\tPNodeItem\022\013\n"
    "\003xID\030\002 \002(\005\022\014\n\004star\030\001 \002(\005\022\r\n\005times\030\003 \002(\005\""
    "F\n\tPGateItem\022\016\n\006isLock\030\001 \002(\010\022\016\n\006gateID\030\002"
    " \002(\005\022\031\n\005items\030\003 \003(\0132\n.PNodeItem\")\n\014PUpda"
    "teGates\022\031\n\005gates\030\001 \003(\0132\n.PGateItem\"9\n\013PU"
    "pdateNode\022\034\n\010nodeItem\030\001 \002(\0132\n.PNodeItem\022"
    "\014\n\004type\030\002 \002(\005\"\?\n\014PUpdateNodes\022\016\n\006gateID\030"
    "\001 \002(\005\022\037\n\tnodeItems\030\002 \003(\0132\014.PUpdateNode\"&"
    "\n\tPGateResp\022\031\n\005gates\030\001 \003(\0132\n.PGateItem\"8"
    "\n\010PNodeReq\022\016\n\006gateId\030\001 \002(\005\022\013\n\003xId\030\002 \002(\005\022"
    "\017\n\007groupId\030\003 \002(\005\"\013\n\tPNodeResp\"V\n\007PNpcRes"
    "\022\013\n\003xId\030\001 \002(\003\022\016\n\006addLvl\030\002 \002(\005\022\016\n\006addExp\030"
    "\003 \002(\005\022\016\n\006curLvl\030\004 \002(\005\022\016\n\006curExp\030\005 \002(\005\"+\n"
    "\010PItemRes\022\016\n\006itemId\030\001 \002(\005\022\017\n\007itemNum\030\002 \002"
    "(\005\"7\n\nPResultReq\022\016\n\006gateId\030\001 \002(\005\022\013\n\003xId\030"
    "\002 \002(\005\022\014\n\004star\030\003 \002(\005\"\224\001\n\013PResultResp\022\014\n\004s"
    "tar\030\001 \002(\005\022\020\n\010groupLvl\030\002 \002(\005\022\023\n\013curGroupL"
    "vl\030\003 \002(\005\022\020\n\010groupExp\030\004 \002(\005\022\014\n\004coin\030\005 \002(\005"
    "\022\026\n\004npcs\030\006 \003(\0132\010.PNpcRes\022\030\n\005items\030\007 \003(\0132"
    "\t.PItemResB.\n com.doteyplay.game.message"
    ".protoB\nGateProBuf", 818);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gate.proto", &protobuf_RegisterTypes);
  PGateReq::default_instance_ = new PGateReq();
  PNodeItem::default_instance_ = new PNodeItem();
  PGateItem::default_instance_ = new PGateItem();
  PUpdateGates::default_instance_ = new PUpdateGates();
  PUpdateNode::default_instance_ = new PUpdateNode();
  PUpdateNodes::default_instance_ = new PUpdateNodes();
  PGateResp::default_instance_ = new PGateResp();
  PNodeReq::default_instance_ = new PNodeReq();
  PNodeResp::default_instance_ = new PNodeResp();
  PNpcRes::default_instance_ = new PNpcRes();
  PItemRes::default_instance_ = new PItemRes();
  PResultReq::default_instance_ = new PResultReq();
  PResultResp::default_instance_ = new PResultResp();
  PGateReq::default_instance_->InitAsDefaultInstance();
  PNodeItem::default_instance_->InitAsDefaultInstance();
  PGateItem::default_instance_->InitAsDefaultInstance();
  PUpdateGates::default_instance_->InitAsDefaultInstance();
  PUpdateNode::default_instance_->InitAsDefaultInstance();
  PUpdateNodes::default_instance_->InitAsDefaultInstance();
  PGateResp::default_instance_->InitAsDefaultInstance();
  PNodeReq::default_instance_->InitAsDefaultInstance();
  PNodeResp::default_instance_->InitAsDefaultInstance();
  PNpcRes::default_instance_->InitAsDefaultInstance();
  PItemRes::default_instance_->InitAsDefaultInstance();
  PResultReq::default_instance_->InitAsDefaultInstance();
  PResultResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gate_2eproto {
  StaticDescriptorInitializer_gate_2eproto() {
    protobuf_AddDesc_gate_2eproto();
  }
} static_descriptor_initializer_gate_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PGateReq::PGateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PGateReq::InitAsDefaultInstance() {
}

PGateReq::PGateReq(const PGateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PGateReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PGateReq::~PGateReq() {
  SharedDtor();
}

void PGateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PGateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PGateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PGateReq_descriptor_;
}

const PGateReq& PGateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

PGateReq* PGateReq::default_instance_ = NULL;

PGateReq* PGateReq::New() const {
  return new PGateReq;
}

void PGateReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PGateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PGateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PGateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PGateReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PGateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PGateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PGateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PGateReq::MergeFrom(const PGateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PGateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PGateReq::CopyFrom(const PGateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PGateReq::IsInitialized() const {

  return true;
}

void PGateReq::Swap(PGateReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PGateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PGateReq_descriptor_;
  metadata.reflection = PGateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PNodeItem::kXIDFieldNumber;
const int PNodeItem::kStarFieldNumber;
const int PNodeItem::kTimesFieldNumber;
#endif  // !_MSC_VER

PNodeItem::PNodeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PNodeItem::InitAsDefaultInstance() {
}

PNodeItem::PNodeItem(const PNodeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PNodeItem::SharedCtor() {
  _cached_size_ = 0;
  xid_ = 0;
  star_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PNodeItem::~PNodeItem() {
  SharedDtor();
}

void PNodeItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PNodeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PNodeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PNodeItem_descriptor_;
}

const PNodeItem& PNodeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

PNodeItem* PNodeItem::default_instance_ = NULL;

PNodeItem* PNodeItem::New() const {
  return new PNodeItem;
}

void PNodeItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    xid_ = 0;
    star_ = 0;
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PNodeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 star = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_xID;
        break;
      }

      // required int32 xID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xid_)));
          set_has_xid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_times;
        break;
      }

      // required int32 times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PNodeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 star = 1;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->star(), output);
  }

  // required int32 xID = 2;
  if (has_xid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->xid(), output);
  }

  // required int32 times = 3;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PNodeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 star = 1;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->star(), target);
  }

  // required int32 xID = 2;
  if (has_xid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->xid(), target);
  }

  // required int32 times = 3;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PNodeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 xID = 2;
    if (has_xid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xid());
    }

    // required int32 star = 1;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // required int32 times = 3;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PNodeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PNodeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PNodeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PNodeItem::MergeFrom(const PNodeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xid()) {
      set_xid(from.xid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PNodeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNodeItem::CopyFrom(const PNodeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNodeItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PNodeItem::Swap(PNodeItem* other) {
  if (other != this) {
    std::swap(xid_, other->xid_);
    std::swap(star_, other->star_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PNodeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PNodeItem_descriptor_;
  metadata.reflection = PNodeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PGateItem::kIsLockFieldNumber;
const int PGateItem::kGateIDFieldNumber;
const int PGateItem::kItemsFieldNumber;
#endif  // !_MSC_VER

PGateItem::PGateItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PGateItem::InitAsDefaultInstance() {
}

PGateItem::PGateItem(const PGateItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PGateItem::SharedCtor() {
  _cached_size_ = 0;
  islock_ = false;
  gateid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PGateItem::~PGateItem() {
  SharedDtor();
}

void PGateItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PGateItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PGateItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PGateItem_descriptor_;
}

const PGateItem& PGateItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

PGateItem* PGateItem::default_instance_ = NULL;

PGateItem* PGateItem::New() const {
  return new PGateItem;
}

void PGateItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    islock_ = false;
    gateid_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PGateItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isLock = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islock_)));
          set_has_islock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateID;
        break;
      }

      // required int32 gateID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .PNodeItem items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PGateItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isLock = 1;
  if (has_islock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->islock(), output);
  }

  // required int32 gateID = 2;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gateid(), output);
  }

  // repeated .PNodeItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PGateItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isLock = 1;
  if (has_islock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->islock(), target);
  }

  // required int32 gateID = 2;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gateid(), target);
  }

  // repeated .PNodeItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PGateItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isLock = 1;
    if (has_islock()) {
      total_size += 1 + 1;
    }

    // required int32 gateID = 2;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateid());
    }

  }
  // repeated .PNodeItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PGateItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PGateItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PGateItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PGateItem::MergeFrom(const PGateItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_islock()) {
      set_islock(from.islock());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PGateItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PGateItem::CopyFrom(const PGateItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PGateItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void PGateItem::Swap(PGateItem* other) {
  if (other != this) {
    std::swap(islock_, other->islock_);
    std::swap(gateid_, other->gateid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PGateItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PGateItem_descriptor_;
  metadata.reflection = PGateItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PUpdateGates::kGatesFieldNumber;
#endif  // !_MSC_VER

PUpdateGates::PUpdateGates()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PUpdateGates::InitAsDefaultInstance() {
}

PUpdateGates::PUpdateGates(const PUpdateGates& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PUpdateGates::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PUpdateGates::~PUpdateGates() {
  SharedDtor();
}

void PUpdateGates::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PUpdateGates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PUpdateGates::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PUpdateGates_descriptor_;
}

const PUpdateGates& PUpdateGates::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

PUpdateGates* PUpdateGates::default_instance_ = NULL;

PUpdateGates* PUpdateGates::New() const {
  return new PUpdateGates;
}

void PUpdateGates::Clear() {
  gates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PUpdateGates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PGateItem gates = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_gates;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PUpdateGates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PGateItem gates = 1;
  for (int i = 0; i < this->gates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PUpdateGates::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PGateItem gates = 1;
  for (int i = 0; i < this->gates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PUpdateGates::ByteSize() const {
  int total_size = 0;

  // repeated .PGateItem gates = 1;
  total_size += 1 * this->gates_size();
  for (int i = 0; i < this->gates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PUpdateGates::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PUpdateGates* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PUpdateGates*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PUpdateGates::MergeFrom(const PUpdateGates& from) {
  GOOGLE_CHECK_NE(&from, this);
  gates_.MergeFrom(from.gates_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PUpdateGates::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PUpdateGates::CopyFrom(const PUpdateGates& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PUpdateGates::IsInitialized() const {

  for (int i = 0; i < gates_size(); i++) {
    if (!this->gates(i).IsInitialized()) return false;
  }
  return true;
}

void PUpdateGates::Swap(PUpdateGates* other) {
  if (other != this) {
    gates_.Swap(&other->gates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PUpdateGates::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PUpdateGates_descriptor_;
  metadata.reflection = PUpdateGates_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PUpdateNode::kNodeItemFieldNumber;
const int PUpdateNode::kTypeFieldNumber;
#endif  // !_MSC_VER

PUpdateNode::PUpdateNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PUpdateNode::InitAsDefaultInstance() {
  nodeitem_ = const_cast< ::PNodeItem*>(&::PNodeItem::default_instance());
}

PUpdateNode::PUpdateNode(const PUpdateNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PUpdateNode::SharedCtor() {
  _cached_size_ = 0;
  nodeitem_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PUpdateNode::~PUpdateNode() {
  SharedDtor();
}

void PUpdateNode::SharedDtor() {
  if (this != default_instance_) {
    delete nodeitem_;
  }
}

void PUpdateNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PUpdateNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PUpdateNode_descriptor_;
}

const PUpdateNode& PUpdateNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

PUpdateNode* PUpdateNode::default_instance_ = NULL;

PUpdateNode* PUpdateNode::New() const {
  return new PUpdateNode;
}

void PUpdateNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nodeitem()) {
      if (nodeitem_ != NULL) nodeitem_->::PNodeItem::Clear();
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PUpdateNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PNodeItem nodeItem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nodeitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PUpdateNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PNodeItem nodeItem = 1;
  if (has_nodeitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodeitem(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PUpdateNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PNodeItem nodeItem = 1;
  if (has_nodeitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodeitem(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PUpdateNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PNodeItem nodeItem = 1;
    if (has_nodeitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodeitem());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PUpdateNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PUpdateNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PUpdateNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PUpdateNode::MergeFrom(const PUpdateNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nodeitem()) {
      mutable_nodeitem()->::PNodeItem::MergeFrom(from.nodeitem());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PUpdateNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PUpdateNode::CopyFrom(const PUpdateNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PUpdateNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_nodeitem()) {
    if (!this->nodeitem().IsInitialized()) return false;
  }
  return true;
}

void PUpdateNode::Swap(PUpdateNode* other) {
  if (other != this) {
    std::swap(nodeitem_, other->nodeitem_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PUpdateNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PUpdateNode_descriptor_;
  metadata.reflection = PUpdateNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PUpdateNodes::kGateIDFieldNumber;
const int PUpdateNodes::kNodeItemsFieldNumber;
#endif  // !_MSC_VER

PUpdateNodes::PUpdateNodes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PUpdateNodes::InitAsDefaultInstance() {
}

PUpdateNodes::PUpdateNodes(const PUpdateNodes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PUpdateNodes::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PUpdateNodes::~PUpdateNodes() {
  SharedDtor();
}

void PUpdateNodes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PUpdateNodes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PUpdateNodes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PUpdateNodes_descriptor_;
}

const PUpdateNodes& PUpdateNodes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

PUpdateNodes* PUpdateNodes::default_instance_ = NULL;

PUpdateNodes* PUpdateNodes::New() const {
  return new PUpdateNodes;
}

void PUpdateNodes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gateid_ = 0;
  }
  nodeitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PUpdateNodes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gateID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodeItems;
        break;
      }

      // repeated .PUpdateNode nodeItems = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodeItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodeitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodeItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PUpdateNodes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gateID = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gateid(), output);
  }

  // repeated .PUpdateNode nodeItems = 2;
  for (int i = 0; i < this->nodeitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nodeitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PUpdateNodes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gateID = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gateid(), target);
  }

  // repeated .PUpdateNode nodeItems = 2;
  for (int i = 0; i < this->nodeitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nodeitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PUpdateNodes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gateID = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateid());
    }

  }
  // repeated .PUpdateNode nodeItems = 2;
  total_size += 1 * this->nodeitems_size();
  for (int i = 0; i < this->nodeitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodeitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PUpdateNodes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PUpdateNodes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PUpdateNodes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PUpdateNodes::MergeFrom(const PUpdateNodes& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodeitems_.MergeFrom(from.nodeitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PUpdateNodes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PUpdateNodes::CopyFrom(const PUpdateNodes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PUpdateNodes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < nodeitems_size(); i++) {
    if (!this->nodeitems(i).IsInitialized()) return false;
  }
  return true;
}

void PUpdateNodes::Swap(PUpdateNodes* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    nodeitems_.Swap(&other->nodeitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PUpdateNodes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PUpdateNodes_descriptor_;
  metadata.reflection = PUpdateNodes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PGateResp::kGatesFieldNumber;
#endif  // !_MSC_VER

PGateResp::PGateResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PGateResp::InitAsDefaultInstance() {
}

PGateResp::PGateResp(const PGateResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PGateResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PGateResp::~PGateResp() {
  SharedDtor();
}

void PGateResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PGateResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PGateResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PGateResp_descriptor_;
}

const PGateResp& PGateResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

PGateResp* PGateResp::default_instance_ = NULL;

PGateResp* PGateResp::New() const {
  return new PGateResp;
}

void PGateResp::Clear() {
  gates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PGateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PGateItem gates = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_gates;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PGateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PGateItem gates = 1;
  for (int i = 0; i < this->gates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PGateResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PGateItem gates = 1;
  for (int i = 0; i < this->gates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PGateResp::ByteSize() const {
  int total_size = 0;

  // repeated .PGateItem gates = 1;
  total_size += 1 * this->gates_size();
  for (int i = 0; i < this->gates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PGateResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PGateResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PGateResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PGateResp::MergeFrom(const PGateResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  gates_.MergeFrom(from.gates_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PGateResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PGateResp::CopyFrom(const PGateResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PGateResp::IsInitialized() const {

  for (int i = 0; i < gates_size(); i++) {
    if (!this->gates(i).IsInitialized()) return false;
  }
  return true;
}

void PGateResp::Swap(PGateResp* other) {
  if (other != this) {
    gates_.Swap(&other->gates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PGateResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PGateResp_descriptor_;
  metadata.reflection = PGateResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PNodeReq::kGateIdFieldNumber;
const int PNodeReq::kXIdFieldNumber;
const int PNodeReq::kGroupIdFieldNumber;
#endif  // !_MSC_VER

PNodeReq::PNodeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PNodeReq::InitAsDefaultInstance() {
}

PNodeReq::PNodeReq(const PNodeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PNodeReq::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = 0;
  xid_ = 0;
  groupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PNodeReq::~PNodeReq() {
  SharedDtor();
}

void PNodeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PNodeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PNodeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PNodeReq_descriptor_;
}

const PNodeReq& PNodeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

PNodeReq* PNodeReq::default_instance_ = NULL;

PNodeReq* PNodeReq::New() const {
  return new PNodeReq;
}

void PNodeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gateid_ = 0;
    xid_ = 0;
    groupid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PNodeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gateId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_xId;
        break;
      }

      // required int32 xId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xid_)));
          set_has_xid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_groupId;
        break;
      }

      // required int32 groupId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PNodeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gateId = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gateid(), output);
  }

  // required int32 xId = 2;
  if (has_xid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->xid(), output);
  }

  // required int32 groupId = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PNodeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gateId = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gateid(), target);
  }

  // required int32 xId = 2;
  if (has_xid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->xid(), target);
  }

  // required int32 groupId = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PNodeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gateId = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateid());
    }

    // required int32 xId = 2;
    if (has_xid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xid());
    }

    // required int32 groupId = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PNodeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PNodeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PNodeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PNodeReq::MergeFrom(const PNodeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_xid()) {
      set_xid(from.xid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PNodeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNodeReq::CopyFrom(const PNodeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNodeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PNodeReq::Swap(PNodeReq* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(xid_, other->xid_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PNodeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PNodeReq_descriptor_;
  metadata.reflection = PNodeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PNodeResp::PNodeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PNodeResp::InitAsDefaultInstance() {
}

PNodeResp::PNodeResp(const PNodeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PNodeResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PNodeResp::~PNodeResp() {
  SharedDtor();
}

void PNodeResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PNodeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PNodeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PNodeResp_descriptor_;
}

const PNodeResp& PNodeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

PNodeResp* PNodeResp::default_instance_ = NULL;

PNodeResp* PNodeResp::New() const {
  return new PNodeResp;
}

void PNodeResp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PNodeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PNodeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PNodeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PNodeResp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PNodeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PNodeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PNodeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PNodeResp::MergeFrom(const PNodeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PNodeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNodeResp::CopyFrom(const PNodeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNodeResp::IsInitialized() const {

  return true;
}

void PNodeResp::Swap(PNodeResp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PNodeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PNodeResp_descriptor_;
  metadata.reflection = PNodeResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PNpcRes::kXIdFieldNumber;
const int PNpcRes::kAddLvlFieldNumber;
const int PNpcRes::kAddExpFieldNumber;
const int PNpcRes::kCurLvlFieldNumber;
const int PNpcRes::kCurExpFieldNumber;
#endif  // !_MSC_VER

PNpcRes::PNpcRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PNpcRes::InitAsDefaultInstance() {
}

PNpcRes::PNpcRes(const PNpcRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PNpcRes::SharedCtor() {
  _cached_size_ = 0;
  xid_ = GOOGLE_LONGLONG(0);
  addlvl_ = 0;
  addexp_ = 0;
  curlvl_ = 0;
  curexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PNpcRes::~PNpcRes() {
  SharedDtor();
}

void PNpcRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PNpcRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PNpcRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PNpcRes_descriptor_;
}

const PNpcRes& PNpcRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

PNpcRes* PNpcRes::default_instance_ = NULL;

PNpcRes* PNpcRes::New() const {
  return new PNpcRes;
}

void PNpcRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    xid_ = GOOGLE_LONGLONG(0);
    addlvl_ = 0;
    addexp_ = 0;
    curlvl_ = 0;
    curexp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PNpcRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 xId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &xid_)));
          set_has_xid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addLvl;
        break;
      }

      // required int32 addLvl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addlvl_)));
          set_has_addlvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_addExp;
        break;
      }

      // required int32 addExp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addexp_)));
          set_has_addexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_curLvl;
        break;
      }

      // required int32 curLvl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curlvl_)));
          set_has_curlvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_curExp;
        break;
      }

      // required int32 curExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curexp_)));
          set_has_curexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PNpcRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 xId = 1;
  if (has_xid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->xid(), output);
  }

  // required int32 addLvl = 2;
  if (has_addlvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->addlvl(), output);
  }

  // required int32 addExp = 3;
  if (has_addexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->addexp(), output);
  }

  // required int32 curLvl = 4;
  if (has_curlvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curlvl(), output);
  }

  // required int32 curExp = 5;
  if (has_curexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->curexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PNpcRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 xId = 1;
  if (has_xid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->xid(), target);
  }

  // required int32 addLvl = 2;
  if (has_addlvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->addlvl(), target);
  }

  // required int32 addExp = 3;
  if (has_addexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->addexp(), target);
  }

  // required int32 curLvl = 4;
  if (has_curlvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curlvl(), target);
  }

  // required int32 curExp = 5;
  if (has_curexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->curexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PNpcRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 xId = 1;
    if (has_xid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->xid());
    }

    // required int32 addLvl = 2;
    if (has_addlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addlvl());
    }

    // required int32 addExp = 3;
    if (has_addexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addexp());
    }

    // required int32 curLvl = 4;
    if (has_curlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curlvl());
    }

    // required int32 curExp = 5;
    if (has_curexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PNpcRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PNpcRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PNpcRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PNpcRes::MergeFrom(const PNpcRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xid()) {
      set_xid(from.xid());
    }
    if (from.has_addlvl()) {
      set_addlvl(from.addlvl());
    }
    if (from.has_addexp()) {
      set_addexp(from.addexp());
    }
    if (from.has_curlvl()) {
      set_curlvl(from.curlvl());
    }
    if (from.has_curexp()) {
      set_curexp(from.curexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PNpcRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNpcRes::CopyFrom(const PNpcRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNpcRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PNpcRes::Swap(PNpcRes* other) {
  if (other != this) {
    std::swap(xid_, other->xid_);
    std::swap(addlvl_, other->addlvl_);
    std::swap(addexp_, other->addexp_);
    std::swap(curlvl_, other->curlvl_);
    std::swap(curexp_, other->curexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PNpcRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PNpcRes_descriptor_;
  metadata.reflection = PNpcRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PItemRes::kItemIdFieldNumber;
const int PItemRes::kItemNumFieldNumber;
#endif  // !_MSC_VER

PItemRes::PItemRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PItemRes::InitAsDefaultInstance() {
}

PItemRes::PItemRes(const PItemRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PItemRes::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PItemRes::~PItemRes() {
  SharedDtor();
}

void PItemRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PItemRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PItemRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PItemRes_descriptor_;
}

const PItemRes& PItemRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

PItemRes* PItemRes::default_instance_ = NULL;

PItemRes* PItemRes::New() const {
  return new PItemRes;
}

void PItemRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    itemnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PItemRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemNum;
        break;
      }

      // required int32 itemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PItemRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // required int32 itemNum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PItemRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // required int32 itemNum = 2;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PItemRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 itemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PItemRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PItemRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PItemRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PItemRes::MergeFrom(const PItemRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PItemRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PItemRes::CopyFrom(const PItemRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PItemRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PItemRes::Swap(PItemRes* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PItemRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PItemRes_descriptor_;
  metadata.reflection = PItemRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PResultReq::kGateIdFieldNumber;
const int PResultReq::kXIdFieldNumber;
const int PResultReq::kStarFieldNumber;
#endif  // !_MSC_VER

PResultReq::PResultReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PResultReq::InitAsDefaultInstance() {
}

PResultReq::PResultReq(const PResultReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PResultReq::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = 0;
  xid_ = 0;
  star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PResultReq::~PResultReq() {
  SharedDtor();
}

void PResultReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PResultReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PResultReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PResultReq_descriptor_;
}

const PResultReq& PResultReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

PResultReq* PResultReq::default_instance_ = NULL;

PResultReq* PResultReq::New() const {
  return new PResultReq;
}

void PResultReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gateid_ = 0;
    xid_ = 0;
    star_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PResultReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gateId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_xId;
        break;
      }

      // required int32 xId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xid_)));
          set_has_xid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // required int32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PResultReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gateId = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gateid(), output);
  }

  // required int32 xId = 2;
  if (has_xid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->xid(), output);
  }

  // required int32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PResultReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gateId = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gateid(), target);
  }

  // required int32 xId = 2;
  if (has_xid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->xid(), target);
  }

  // required int32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PResultReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gateId = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateid());
    }

    // required int32 xId = 2;
    if (has_xid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xid());
    }

    // required int32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PResultReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PResultReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PResultReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PResultReq::MergeFrom(const PResultReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_xid()) {
      set_xid(from.xid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PResultReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PResultReq::CopyFrom(const PResultReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PResultReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PResultReq::Swap(PResultReq* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(xid_, other->xid_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PResultReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PResultReq_descriptor_;
  metadata.reflection = PResultReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PResultResp::kStarFieldNumber;
const int PResultResp::kGroupLvlFieldNumber;
const int PResultResp::kCurGroupLvlFieldNumber;
const int PResultResp::kGroupExpFieldNumber;
const int PResultResp::kCoinFieldNumber;
const int PResultResp::kNpcsFieldNumber;
const int PResultResp::kItemsFieldNumber;
#endif  // !_MSC_VER

PResultResp::PResultResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PResultResp::InitAsDefaultInstance() {
}

PResultResp::PResultResp(const PResultResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PResultResp::SharedCtor() {
  _cached_size_ = 0;
  star_ = 0;
  grouplvl_ = 0;
  curgrouplvl_ = 0;
  groupexp_ = 0;
  coin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PResultResp::~PResultResp() {
  SharedDtor();
}

void PResultResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PResultResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PResultResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PResultResp_descriptor_;
}

const PResultResp& PResultResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gate_2eproto();
  return *default_instance_;
}

PResultResp* PResultResp::default_instance_ = NULL;

PResultResp* PResultResp::New() const {
  return new PResultResp;
}

void PResultResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    star_ = 0;
    grouplvl_ = 0;
    curgrouplvl_ = 0;
    groupexp_ = 0;
    coin_ = 0;
  }
  npcs_.Clear();
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PResultResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 star = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupLvl;
        break;
      }

      // required int32 groupLvl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grouplvl_)));
          set_has_grouplvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curGroupLvl;
        break;
      }

      // required int32 curGroupLvl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curGroupLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curgrouplvl_)));
          set_has_curgrouplvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_groupExp;
        break;
      }

      // required int32 groupExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupexp_)));
          set_has_groupexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_coin;
        break;
      }

      // required int32 coin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_npcs;
        break;
      }

      // repeated .PNpcRes npcs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npcs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npcs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_npcs;
        if (input->ExpectTag(58)) goto parse_items;
        break;
      }

      // repeated .PItemRes items = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PResultResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 star = 1;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->star(), output);
  }

  // required int32 groupLvl = 2;
  if (has_grouplvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grouplvl(), output);
  }

  // required int32 curGroupLvl = 3;
  if (has_curgrouplvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curgrouplvl(), output);
  }

  // required int32 groupExp = 4;
  if (has_groupexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->groupexp(), output);
  }

  // required int32 coin = 5;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->coin(), output);
  }

  // repeated .PNpcRes npcs = 6;
  for (int i = 0; i < this->npcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->npcs(i), output);
  }

  // repeated .PItemRes items = 7;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PResultResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 star = 1;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->star(), target);
  }

  // required int32 groupLvl = 2;
  if (has_grouplvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grouplvl(), target);
  }

  // required int32 curGroupLvl = 3;
  if (has_curgrouplvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curgrouplvl(), target);
  }

  // required int32 groupExp = 4;
  if (has_groupexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->groupexp(), target);
  }

  // required int32 coin = 5;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->coin(), target);
  }

  // repeated .PNpcRes npcs = 6;
  for (int i = 0; i < this->npcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->npcs(i), target);
  }

  // repeated .PItemRes items = 7;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PResultResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 star = 1;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // required int32 groupLvl = 2;
    if (has_grouplvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grouplvl());
    }

    // required int32 curGroupLvl = 3;
    if (has_curgrouplvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curgrouplvl());
    }

    // required int32 groupExp = 4;
    if (has_groupexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupexp());
    }

    // required int32 coin = 5;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

  }
  // repeated .PNpcRes npcs = 6;
  total_size += 1 * this->npcs_size();
  for (int i = 0; i < this->npcs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npcs(i));
  }

  // repeated .PItemRes items = 7;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PResultResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PResultResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PResultResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PResultResp::MergeFrom(const PResultResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  npcs_.MergeFrom(from.npcs_);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_grouplvl()) {
      set_grouplvl(from.grouplvl());
    }
    if (from.has_curgrouplvl()) {
      set_curgrouplvl(from.curgrouplvl());
    }
    if (from.has_groupexp()) {
      set_groupexp(from.groupexp());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PResultResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PResultResp::CopyFrom(const PResultResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PResultResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  for (int i = 0; i < npcs_size(); i++) {
    if (!this->npcs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void PResultResp::Swap(PResultResp* other) {
  if (other != this) {
    std::swap(star_, other->star_);
    std::swap(grouplvl_, other->grouplvl_);
    std::swap(curgrouplvl_, other->curgrouplvl_);
    std::swap(groupexp_, other->groupexp_);
    std::swap(coin_, other->coin_);
    npcs_.Swap(&other->npcs_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PResultResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PResultResp_descriptor_;
  metadata.reflection = PResultResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
