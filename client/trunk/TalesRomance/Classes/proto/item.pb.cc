// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "item.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PItemChangeLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PItemChangeLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* PUpItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PUpItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PSellGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PSellGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* PComposeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PComposeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PWearEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PWearEquip_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_item_2eproto() {
  protobuf_AddDesc_item_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "item.proto");
  GOOGLE_CHECK(file != NULL);
  PItem_descriptor_ = file->message_type(0);
  static const int PItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PItem, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PItem, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PItem, posid_),
  };
  PItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PItem_descriptor_,
      PItem::default_instance_,
      PItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PItem));
  PItemChangeLog_descriptor_ = file->message_type(1);
  static const int PItemChangeLog_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PItemChangeLog, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PItemChangeLog, itemaddnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PItemChangeLog, itemfinalnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PItemChangeLog, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PItemChangeLog, posid_),
  };
  PItemChangeLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PItemChangeLog_descriptor_,
      PItemChangeLog::default_instance_,
      PItemChangeLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PItemChangeLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PItemChangeLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PItemChangeLog));
  PUpItem_descriptor_ = file->message_type(2);
  static const int PUpItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUpItem, itemloglist_),
  };
  PUpItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PUpItem_descriptor_,
      PUpItem::default_instance_,
      PUpItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUpItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PUpItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PUpItem));
  PSellGroup_descriptor_ = file->message_type(3);
  static const int PSellGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSellGroup, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSellGroup, itemsellnum_),
  };
  PSellGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PSellGroup_descriptor_,
      PSellGroup::default_instance_,
      PSellGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSellGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSellGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PSellGroup));
  PComposeItem_descriptor_ = file->message_type(4);
  static const int PComposeItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PComposeItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PComposeItem, itemnum_),
  };
  PComposeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PComposeItem_descriptor_,
      PComposeItem::default_instance_,
      PComposeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PComposeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PComposeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PComposeItem));
  PWearEquip_descriptor_ = file->message_type(5);
  static const int PWearEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PWearEquip, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PWearEquip, posid_),
  };
  PWearEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PWearEquip_descriptor_,
      PWearEquip::default_instance_,
      PWearEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PWearEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PWearEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PWearEquip));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_item_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PItem_descriptor_, &PItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PItemChangeLog_descriptor_, &PItemChangeLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PUpItem_descriptor_, &PUpItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PSellGroup_descriptor_, &PSellGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PComposeItem_descriptor_, &PComposeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PWearEquip_descriptor_, &PWearEquip::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_item_2eproto() {
  delete PItem::default_instance_;
  delete PItem_reflection_;
  delete PItemChangeLog::default_instance_;
  delete PItemChangeLog_reflection_;
  delete PUpItem::default_instance_;
  delete PUpItem_reflection_;
  delete PSellGroup::default_instance_;
  delete PSellGroup_reflection_;
  delete PComposeItem::default_instance_;
  delete PComposeItem_reflection_;
  delete PWearEquip::default_instance_;
  delete PWearEquip_reflection_;
}

void protobuf_AddDesc_item_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nitem.proto\"F\n\005PItem\022\016\n\006itemId\030\001 \002(\005\022\017\n"
    "\007itemNum\030\002 \002(\005\022\r\n\005npcId\030\003 \002(\003\022\r\n\005posId\030\004"
    " \001(\005\"h\n\016PItemChangeLog\022\016\n\006itemId\030\001 \002(\005\022\022"
    "\n\nitemAddNum\030\002 \002(\005\022\024\n\014itemFinalNum\030\003 \002(\005"
    "\022\r\n\005npcId\030\004 \002(\003\022\r\n\005posId\030\005 \001(\005\"/\n\007PUpIte"
    "m\022$\n\013itemLogList\030\001 \003(\0132\017.PItemChangeLog\""
    "1\n\nPSellGroup\022\016\n\006itemId\030\001 \003(\005\022\023\n\013itemSel"
    "lNum\030\002 \003(\005\"/\n\014PComposeItem\022\016\n\006itemId\030\001 \002"
    "(\005\022\017\n\007itemNum\030\002 \002(\005\"+\n\nPWearEquip\022\016\n\006her"
    "oId\030\001 \002(\003\022\r\n\005posId\030\002 \002(\005B.\n com.doteypla"
    "y.game.message.protoB\nItemProBuf", 432);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "item.proto", &protobuf_RegisterTypes);
  PItem::default_instance_ = new PItem();
  PItemChangeLog::default_instance_ = new PItemChangeLog();
  PUpItem::default_instance_ = new PUpItem();
  PSellGroup::default_instance_ = new PSellGroup();
  PComposeItem::default_instance_ = new PComposeItem();
  PWearEquip::default_instance_ = new PWearEquip();
  PItem::default_instance_->InitAsDefaultInstance();
  PItemChangeLog::default_instance_->InitAsDefaultInstance();
  PUpItem::default_instance_->InitAsDefaultInstance();
  PSellGroup::default_instance_->InitAsDefaultInstance();
  PComposeItem::default_instance_->InitAsDefaultInstance();
  PWearEquip::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_item_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_item_2eproto {
  StaticDescriptorInitializer_item_2eproto() {
    protobuf_AddDesc_item_2eproto();
  }
} static_descriptor_initializer_item_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PItem::kItemIdFieldNumber;
const int PItem::kItemNumFieldNumber;
const int PItem::kNpcIdFieldNumber;
const int PItem::kPosIdFieldNumber;
#endif  // !_MSC_VER

PItem::PItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PItem::InitAsDefaultInstance() {
}

PItem::PItem(const PItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  itemnum_ = 0;
  npcid_ = GOOGLE_LONGLONG(0);
  posid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PItem::~PItem() {
  SharedDtor();
}

void PItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PItem_descriptor_;
}

const PItem& PItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

PItem* PItem::default_instance_ = NULL;

PItem* PItem::New() const {
  return new PItem;
}

void PItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    itemnum_ = 0;
    npcid_ = GOOGLE_LONGLONG(0);
    posid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemNum;
        break;
      }

      // required int32 itemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_npcId;
        break;
      }

      // required int64 npcId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npcId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_posId;
        break;
      }

      // optional int32 posId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posid_)));
          set_has_posid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // required int32 itemNum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemnum(), output);
  }

  // required int64 npcId = 3;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->npcid(), output);
  }

  // optional int32 posId = 4;
  if (has_posid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // required int32 itemNum = 2;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemnum(), target);
  }

  // required int64 npcId = 3;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->npcid(), target);
  }

  // optional int32 posId = 4;
  if (has_posid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 itemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

    // required int64 npcId = 3;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->npcid());
    }

    // optional int32 posId = 4;
    if (has_posid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PItem::MergeFrom(const PItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_posid()) {
      set_posid(from.posid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PItem::CopyFrom(const PItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PItem::Swap(PItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(npcid_, other->npcid_);
    std::swap(posid_, other->posid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PItem_descriptor_;
  metadata.reflection = PItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PItemChangeLog::kItemIdFieldNumber;
const int PItemChangeLog::kItemAddNumFieldNumber;
const int PItemChangeLog::kItemFinalNumFieldNumber;
const int PItemChangeLog::kNpcIdFieldNumber;
const int PItemChangeLog::kPosIdFieldNumber;
#endif  // !_MSC_VER

PItemChangeLog::PItemChangeLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PItemChangeLog::InitAsDefaultInstance() {
}

PItemChangeLog::PItemChangeLog(const PItemChangeLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PItemChangeLog::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  itemaddnum_ = 0;
  itemfinalnum_ = 0;
  npcid_ = GOOGLE_LONGLONG(0);
  posid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PItemChangeLog::~PItemChangeLog() {
  SharedDtor();
}

void PItemChangeLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PItemChangeLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PItemChangeLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PItemChangeLog_descriptor_;
}

const PItemChangeLog& PItemChangeLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

PItemChangeLog* PItemChangeLog::default_instance_ = NULL;

PItemChangeLog* PItemChangeLog::New() const {
  return new PItemChangeLog;
}

void PItemChangeLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    itemaddnum_ = 0;
    itemfinalnum_ = 0;
    npcid_ = GOOGLE_LONGLONG(0);
    posid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PItemChangeLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemAddNum;
        break;
      }

      // required int32 itemAddNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemAddNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemaddnum_)));
          set_has_itemaddnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemFinalNum;
        break;
      }

      // required int32 itemFinalNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemFinalNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemfinalnum_)));
          set_has_itemfinalnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_npcId;
        break;
      }

      // required int64 npcId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npcId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_posId;
        break;
      }

      // optional int32 posId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posid_)));
          set_has_posid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PItemChangeLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // required int32 itemAddNum = 2;
  if (has_itemaddnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemaddnum(), output);
  }

  // required int32 itemFinalNum = 3;
  if (has_itemfinalnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemfinalnum(), output);
  }

  // required int64 npcId = 4;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->npcid(), output);
  }

  // optional int32 posId = 5;
  if (has_posid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->posid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PItemChangeLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // required int32 itemAddNum = 2;
  if (has_itemaddnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemaddnum(), target);
  }

  // required int32 itemFinalNum = 3;
  if (has_itemfinalnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemfinalnum(), target);
  }

  // required int64 npcId = 4;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->npcid(), target);
  }

  // optional int32 posId = 5;
  if (has_posid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->posid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PItemChangeLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 itemAddNum = 2;
    if (has_itemaddnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemaddnum());
    }

    // required int32 itemFinalNum = 3;
    if (has_itemfinalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemfinalnum());
    }

    // required int64 npcId = 4;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->npcid());
    }

    // optional int32 posId = 5;
    if (has_posid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PItemChangeLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PItemChangeLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PItemChangeLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PItemChangeLog::MergeFrom(const PItemChangeLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemaddnum()) {
      set_itemaddnum(from.itemaddnum());
    }
    if (from.has_itemfinalnum()) {
      set_itemfinalnum(from.itemfinalnum());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_posid()) {
      set_posid(from.posid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PItemChangeLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PItemChangeLog::CopyFrom(const PItemChangeLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PItemChangeLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PItemChangeLog::Swap(PItemChangeLog* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemaddnum_, other->itemaddnum_);
    std::swap(itemfinalnum_, other->itemfinalnum_);
    std::swap(npcid_, other->npcid_);
    std::swap(posid_, other->posid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PItemChangeLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PItemChangeLog_descriptor_;
  metadata.reflection = PItemChangeLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PUpItem::kItemLogListFieldNumber;
#endif  // !_MSC_VER

PUpItem::PUpItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PUpItem::InitAsDefaultInstance() {
}

PUpItem::PUpItem(const PUpItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PUpItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PUpItem::~PUpItem() {
  SharedDtor();
}

void PUpItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PUpItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PUpItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PUpItem_descriptor_;
}

const PUpItem& PUpItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

PUpItem* PUpItem::default_instance_ = NULL;

PUpItem* PUpItem::New() const {
  return new PUpItem;
}

void PUpItem::Clear() {
  itemloglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PUpItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PItemChangeLog itemLogList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemLogList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemloglist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_itemLogList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PUpItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PItemChangeLog itemLogList = 1;
  for (int i = 0; i < this->itemloglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->itemloglist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PUpItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PItemChangeLog itemLogList = 1;
  for (int i = 0; i < this->itemloglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->itemloglist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PUpItem::ByteSize() const {
  int total_size = 0;

  // repeated .PItemChangeLog itemLogList = 1;
  total_size += 1 * this->itemloglist_size();
  for (int i = 0; i < this->itemloglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemloglist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PUpItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PUpItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PUpItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PUpItem::MergeFrom(const PUpItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemloglist_.MergeFrom(from.itemloglist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PUpItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PUpItem::CopyFrom(const PUpItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PUpItem::IsInitialized() const {

  for (int i = 0; i < itemloglist_size(); i++) {
    if (!this->itemloglist(i).IsInitialized()) return false;
  }
  return true;
}

void PUpItem::Swap(PUpItem* other) {
  if (other != this) {
    itemloglist_.Swap(&other->itemloglist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PUpItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PUpItem_descriptor_;
  metadata.reflection = PUpItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PSellGroup::kItemIdFieldNumber;
const int PSellGroup::kItemSellNumFieldNumber;
#endif  // !_MSC_VER

PSellGroup::PSellGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PSellGroup::InitAsDefaultInstance() {
}

PSellGroup::PSellGroup(const PSellGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PSellGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PSellGroup::~PSellGroup() {
  SharedDtor();
}

void PSellGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PSellGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PSellGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PSellGroup_descriptor_;
}

const PSellGroup& PSellGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

PSellGroup* PSellGroup::default_instance_ = NULL;

PSellGroup* PSellGroup::New() const {
  return new PSellGroup;
}

void PSellGroup::Clear() {
  itemid_.Clear();
  itemsellnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PSellGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_itemid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_itemId;
        if (input->ExpectTag(16)) goto parse_itemSellNum;
        break;
      }

      // repeated int32 itemSellNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemSellNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_itemsellnum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemsellnum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemSellNum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PSellGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 itemId = 1;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->itemid(i), output);
  }

  // repeated int32 itemSellNum = 2;
  for (int i = 0; i < this->itemsellnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->itemsellnum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PSellGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 itemId = 1;
  for (int i = 0; i < this->itemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->itemid(i), target);
  }

  // repeated int32 itemSellNum = 2;
  for (int i = 0; i < this->itemsellnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->itemsellnum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PSellGroup::ByteSize() const {
  int total_size = 0;

  // repeated int32 itemId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }

  // repeated int32 itemSellNum = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemsellnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemsellnum(i));
    }
    total_size += 1 * this->itemsellnum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PSellGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PSellGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PSellGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PSellGroup::MergeFrom(const PSellGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemid_.MergeFrom(from.itemid_);
  itemsellnum_.MergeFrom(from.itemsellnum_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PSellGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PSellGroup::CopyFrom(const PSellGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSellGroup::IsInitialized() const {

  return true;
}

void PSellGroup::Swap(PSellGroup* other) {
  if (other != this) {
    itemid_.Swap(&other->itemid_);
    itemsellnum_.Swap(&other->itemsellnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PSellGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PSellGroup_descriptor_;
  metadata.reflection = PSellGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PComposeItem::kItemIdFieldNumber;
const int PComposeItem::kItemNumFieldNumber;
#endif  // !_MSC_VER

PComposeItem::PComposeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PComposeItem::InitAsDefaultInstance() {
}

PComposeItem::PComposeItem(const PComposeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PComposeItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PComposeItem::~PComposeItem() {
  SharedDtor();
}

void PComposeItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PComposeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PComposeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PComposeItem_descriptor_;
}

const PComposeItem& PComposeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

PComposeItem* PComposeItem::default_instance_ = NULL;

PComposeItem* PComposeItem::New() const {
  return new PComposeItem;
}

void PComposeItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    itemnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PComposeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemNum;
        break;
      }

      // required int32 itemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PComposeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // required int32 itemNum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PComposeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // required int32 itemNum = 2;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PComposeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 itemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PComposeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PComposeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PComposeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PComposeItem::MergeFrom(const PComposeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PComposeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PComposeItem::CopyFrom(const PComposeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PComposeItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PComposeItem::Swap(PComposeItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PComposeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PComposeItem_descriptor_;
  metadata.reflection = PComposeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PWearEquip::kHeroIdFieldNumber;
const int PWearEquip::kPosIdFieldNumber;
#endif  // !_MSC_VER

PWearEquip::PWearEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PWearEquip::InitAsDefaultInstance() {
}

PWearEquip::PWearEquip(const PWearEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PWearEquip::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = GOOGLE_LONGLONG(0);
  posid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PWearEquip::~PWearEquip() {
  SharedDtor();
}

void PWearEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PWearEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PWearEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PWearEquip_descriptor_;
}

const PWearEquip& PWearEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_item_2eproto();
  return *default_instance_;
}

PWearEquip* PWearEquip::default_instance_ = NULL;

PWearEquip* PWearEquip::New() const {
  return new PWearEquip;
}

void PWearEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = GOOGLE_LONGLONG(0);
    posid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PWearEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 heroId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_posId;
        break;
      }

      // required int32 posId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posid_)));
          set_has_posid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PWearEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 heroId = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->heroid(), output);
  }

  // required int32 posId = 2;
  if (has_posid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PWearEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 heroId = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->heroid(), target);
  }

  // required int32 posId = 2;
  if (has_posid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PWearEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 heroId = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->heroid());
    }

    // required int32 posId = 2;
    if (has_posid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PWearEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PWearEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PWearEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PWearEquip::MergeFrom(const PWearEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_posid()) {
      set_posid(from.posid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PWearEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PWearEquip::CopyFrom(const PWearEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PWearEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PWearEquip::Swap(PWearEquip* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(posid_, other->posid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PWearEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PWearEquip_descriptor_;
  metadata.reflection = PWearEquip_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
