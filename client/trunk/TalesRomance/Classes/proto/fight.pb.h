// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fight.proto

#ifndef PROTOBUF_fight_2eproto__INCLUDED
#define PROTOBUF_fight_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_fight_2eproto();
void protobuf_AssignDesc_fight_2eproto();
void protobuf_ShutdownFile_fight_2eproto();

class PHit;

// ===================================================================

class PHit : public ::google::protobuf::Message {
 public:
  PHit();
  virtual ~PHit();

  PHit(const PHit& from);

  inline PHit& operator=(const PHit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PHit& default_instance();

  void Swap(PHit* other);

  // implements Message ----------------------------------------------

  PHit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PHit& from);
  void MergeFrom(const PHit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 xid = 1;
  inline bool has_xid() const;
  inline void clear_xid();
  static const int kXidFieldNumber = 1;
  inline ::google::protobuf::int32 xid() const;
  inline void set_xid(::google::protobuf::int32 value);

  // required bool isMiss = 2;
  inline bool has_ismiss() const;
  inline void clear_ismiss();
  static const int kIsMissFieldNumber = 2;
  inline bool ismiss() const;
  inline void set_ismiss(bool value);

  // required bool isCrh = 3;
  inline bool has_iscrh() const;
  inline void clear_iscrh();
  static const int kIsCrhFieldNumber = 3;
  inline bool iscrh() const;
  inline void set_iscrh(bool value);

  // required int32 hp = 4;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 4;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // required int32 addBuff = 5;
  inline bool has_addbuff() const;
  inline void clear_addbuff();
  static const int kAddBuffFieldNumber = 5;
  inline ::google::protobuf::int32 addbuff() const;
  inline void set_addbuff(::google::protobuf::int32 value);

  // required int32 delBuff = 6;
  inline bool has_delbuff() const;
  inline void clear_delbuff();
  static const int kDelBuffFieldNumber = 6;
  inline ::google::protobuf::int32 delbuff() const;
  inline void set_delbuff(::google::protobuf::int32 value);

  // required bool isDie = 7;
  inline bool has_isdie() const;
  inline void clear_isdie();
  static const int kIsDieFieldNumber = 7;
  inline bool isdie() const;
  inline void set_isdie(bool value);

  // required int32 skill = 8;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 8;
  inline ::google::protobuf::int32 skill() const;
  inline void set_skill(::google::protobuf::int32 value);

  // required int32 axid = 9;
  inline bool has_axid() const;
  inline void clear_axid();
  static const int kAxidFieldNumber = 9;
  inline ::google::protobuf::int32 axid() const;
  inline void set_axid(::google::protobuf::int32 value);

  // required int32 ahp = 10;
  inline bool has_ahp() const;
  inline void clear_ahp();
  static const int kAhpFieldNumber = 10;
  inline ::google::protobuf::int32 ahp() const;
  inline void set_ahp(::google::protobuf::int32 value);

  // required int32 pos = 11;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 11;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // required int32 apos = 12;
  inline bool has_apos() const;
  inline void clear_apos();
  static const int kAposFieldNumber = 12;
  inline ::google::protobuf::int32 apos() const;
  inline void set_apos(::google::protobuf::int32 value);

  // required float perHp = 13;
  inline bool has_perhp() const;
  inline void clear_perhp();
  static const int kPerHpFieldNumber = 13;
  inline float perhp() const;
  inline void set_perhp(float value);

  // @@protoc_insertion_point(class_scope:PHit)
 private:
  inline void set_has_xid();
  inline void clear_has_xid();
  inline void set_has_ismiss();
  inline void clear_has_ismiss();
  inline void set_has_iscrh();
  inline void clear_has_iscrh();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_addbuff();
  inline void clear_has_addbuff();
  inline void set_has_delbuff();
  inline void clear_has_delbuff();
  inline void set_has_isdie();
  inline void clear_has_isdie();
  inline void set_has_skill();
  inline void clear_has_skill();
  inline void set_has_axid();
  inline void clear_has_axid();
  inline void set_has_ahp();
  inline void clear_has_ahp();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_apos();
  inline void clear_has_apos();
  inline void set_has_perhp();
  inline void clear_has_perhp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 xid_;
  ::google::protobuf::int32 hp_;
  bool ismiss_;
  bool iscrh_;
  bool isdie_;
  ::google::protobuf::int32 addbuff_;
  ::google::protobuf::int32 delbuff_;
  ::google::protobuf::int32 skill_;
  ::google::protobuf::int32 axid_;
  ::google::protobuf::int32 ahp_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 apos_;
  float perhp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_fight_2eproto();
  friend void protobuf_AssignDesc_fight_2eproto();
  friend void protobuf_ShutdownFile_fight_2eproto();

  void InitAsDefaultInstance();
  static PHit* default_instance_;
};
// ===================================================================


// ===================================================================

// PHit

// required int32 xid = 1;
inline bool PHit::has_xid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PHit::set_has_xid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PHit::clear_has_xid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PHit::clear_xid() {
  xid_ = 0;
  clear_has_xid();
}
inline ::google::protobuf::int32 PHit::xid() const {
  return xid_;
}
inline void PHit::set_xid(::google::protobuf::int32 value) {
  set_has_xid();
  xid_ = value;
}

// required bool isMiss = 2;
inline bool PHit::has_ismiss() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PHit::set_has_ismiss() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PHit::clear_has_ismiss() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PHit::clear_ismiss() {
  ismiss_ = false;
  clear_has_ismiss();
}
inline bool PHit::ismiss() const {
  return ismiss_;
}
inline void PHit::set_ismiss(bool value) {
  set_has_ismiss();
  ismiss_ = value;
}

// required bool isCrh = 3;
inline bool PHit::has_iscrh() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PHit::set_has_iscrh() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PHit::clear_has_iscrh() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PHit::clear_iscrh() {
  iscrh_ = false;
  clear_has_iscrh();
}
inline bool PHit::iscrh() const {
  return iscrh_;
}
inline void PHit::set_iscrh(bool value) {
  set_has_iscrh();
  iscrh_ = value;
}

// required int32 hp = 4;
inline bool PHit::has_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PHit::set_has_hp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PHit::clear_has_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PHit::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 PHit::hp() const {
  return hp_;
}
inline void PHit::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// required int32 addBuff = 5;
inline bool PHit::has_addbuff() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PHit::set_has_addbuff() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PHit::clear_has_addbuff() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PHit::clear_addbuff() {
  addbuff_ = 0;
  clear_has_addbuff();
}
inline ::google::protobuf::int32 PHit::addbuff() const {
  return addbuff_;
}
inline void PHit::set_addbuff(::google::protobuf::int32 value) {
  set_has_addbuff();
  addbuff_ = value;
}

// required int32 delBuff = 6;
inline bool PHit::has_delbuff() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PHit::set_has_delbuff() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PHit::clear_has_delbuff() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PHit::clear_delbuff() {
  delbuff_ = 0;
  clear_has_delbuff();
}
inline ::google::protobuf::int32 PHit::delbuff() const {
  return delbuff_;
}
inline void PHit::set_delbuff(::google::protobuf::int32 value) {
  set_has_delbuff();
  delbuff_ = value;
}

// required bool isDie = 7;
inline bool PHit::has_isdie() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PHit::set_has_isdie() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PHit::clear_has_isdie() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PHit::clear_isdie() {
  isdie_ = false;
  clear_has_isdie();
}
inline bool PHit::isdie() const {
  return isdie_;
}
inline void PHit::set_isdie(bool value) {
  set_has_isdie();
  isdie_ = value;
}

// required int32 skill = 8;
inline bool PHit::has_skill() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PHit::set_has_skill() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PHit::clear_has_skill() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PHit::clear_skill() {
  skill_ = 0;
  clear_has_skill();
}
inline ::google::protobuf::int32 PHit::skill() const {
  return skill_;
}
inline void PHit::set_skill(::google::protobuf::int32 value) {
  set_has_skill();
  skill_ = value;
}

// required int32 axid = 9;
inline bool PHit::has_axid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PHit::set_has_axid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PHit::clear_has_axid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PHit::clear_axid() {
  axid_ = 0;
  clear_has_axid();
}
inline ::google::protobuf::int32 PHit::axid() const {
  return axid_;
}
inline void PHit::set_axid(::google::protobuf::int32 value) {
  set_has_axid();
  axid_ = value;
}

// required int32 ahp = 10;
inline bool PHit::has_ahp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PHit::set_has_ahp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PHit::clear_has_ahp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PHit::clear_ahp() {
  ahp_ = 0;
  clear_has_ahp();
}
inline ::google::protobuf::int32 PHit::ahp() const {
  return ahp_;
}
inline void PHit::set_ahp(::google::protobuf::int32 value) {
  set_has_ahp();
  ahp_ = value;
}

// required int32 pos = 11;
inline bool PHit::has_pos() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PHit::set_has_pos() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PHit::clear_has_pos() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PHit::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 PHit::pos() const {
  return pos_;
}
inline void PHit::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// required int32 apos = 12;
inline bool PHit::has_apos() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PHit::set_has_apos() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PHit::clear_has_apos() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PHit::clear_apos() {
  apos_ = 0;
  clear_has_apos();
}
inline ::google::protobuf::int32 PHit::apos() const {
  return apos_;
}
inline void PHit::set_apos(::google::protobuf::int32 value) {
  set_has_apos();
  apos_ = value;
}

// required float perHp = 13;
inline bool PHit::has_perhp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PHit::set_has_perhp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PHit::clear_has_perhp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PHit::clear_perhp() {
  perhp_ = 0;
  clear_has_perhp();
}
inline float PHit::perhp() const {
  return perhp_;
}
inline void PHit::set_perhp(float value) {
  set_has_perhp();
  perhp_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fight_2eproto__INCLUDED
