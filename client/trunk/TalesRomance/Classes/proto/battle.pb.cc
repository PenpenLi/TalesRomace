// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "battle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* PFightItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PFightItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PRound_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PRound_reflection_ = NULL;
const ::google::protobuf::Descriptor* Phurt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Phurt_reflection_ = NULL;
const ::google::protobuf::Descriptor* PTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PTarget_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_battle_2eproto() {
  protobuf_AddDesc_battle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "battle.proto");
  GOOGLE_CHECK(file != NULL);
  PBattle_descriptor_ = file->message_type(0);
  static const int PBattle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBattle, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBattle, rounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBattle, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBattle, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBattle, exp_),
  };
  PBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBattle_descriptor_,
      PBattle::default_instance_,
      PBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBattle));
  PFightItem_descriptor_ = file->message_type(1);
  static const int PFightItem_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PFightItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PFightItem, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PFightItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PFightItem, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PFightItem, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PFightItem, friendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PFightItem, friendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PFightItem, friendicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PFightItem, friendavatar_),
  };
  PFightItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PFightItem_descriptor_,
      PFightItem::default_instance_,
      PFightItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PFightItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PFightItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PFightItem));
  PRound_descriptor_ = file->message_type(2);
  static const int PRound_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRound, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRound, isskip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRound, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRound, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRound, aoyiskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRound, delicons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRound, delstates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRound, buffhps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRound, lefthp_),
  };
  PRound_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PRound_descriptor_,
      PRound::default_instance_,
      PRound_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRound, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRound, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PRound));
  Phurt_descriptor_ = file->message_type(3);
  static const int Phurt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phurt, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phurt, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phurt, targets_),
  };
  Phurt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Phurt_descriptor_,
      Phurt::default_instance_,
      Phurt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phurt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phurt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Phurt));
  PTarget_descriptor_ = file->message_type(4);
  static const int PTarget_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTarget, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTarget, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTarget, bufficon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTarget, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTarget, lefthp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTarget, hptypes_),
  };
  PTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PTarget_descriptor_,
      PTarget::default_instance_,
      PTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PTarget));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_battle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBattle_descriptor_, &PBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PFightItem_descriptor_, &PFightItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PRound_descriptor_, &PRound::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Phurt_descriptor_, &Phurt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PTarget_descriptor_, &PTarget::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_battle_2eproto() {
  delete PBattle::default_instance_;
  delete PBattle_reflection_;
  delete PFightItem::default_instance_;
  delete PFightItem_reflection_;
  delete PRound::default_instance_;
  delete PRound_reflection_;
  delete Phurt::default_instance_;
  delete Phurt_reflection_;
  delete PTarget::default_instance_;
  delete PTarget_reflection_;
}

void protobuf_AddDesc_battle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014battle.proto\"h\n\007PBattle\022\032\n\005heros\030\001 \003(\013"
    "2\013.PFightItem\022\027\n\006rounds\030\002 \003(\0132\007.PRound\022\r"
    "\n\005cards\030\003 \003(\005\022\014\n\004gold\030\004 \002(\005\022\013\n\003exp\030\005 \002(\005"
    "\"\240\001\n\nPFightItem\022\n\n\002id\030\001 \002(\005\022\n\n\002hp\030\002 \002(\005\022"
    "\014\n\004name\030\003 \002(\t\022\014\n\004icon\030\004 \002(\t\022\016\n\006avatar\030\005 "
    "\002(\t\022\020\n\010friendID\030\006 \002(\t\022\022\n\nfriendName\030\007 \002("
    "\t\022\022\n\nfriendIcon\030\010 \002(\t\022\024\n\014friendAvatar\030\t "
    "\002(\t\"\252\001\n\006PRound\022\016\n\006source\030\001 \002(\005\022\016\n\006isSkip"
    "\030\002 \002(\010\022\016\n\006target\030\003 \001(\005\022\025\n\005cards\030\004 \003(\0132\006."
    "Phurt\022\023\n\013aoyiSkillID\030\005 \001(\005\022\020\n\010delIcons\030\006"
    " \003(\t\022\021\n\tdelStates\030\007 \003(\005\022\017\n\007buffHps\030\010 \003(\005"
    "\022\016\n\006leftHp\030\t \002(\005\"A\n\005Phurt\022\014\n\004card\030\001 \001(\005\022"
    "\017\n\007skillID\030\002 \002(\010\022\031\n\007targets\030\003 \003(\0132\010.PTar"
    "get\"i\n\007PTarget\022\020\n\010targetID\030\001 \002(\005\022\r\n\005stat"
    "e\030\002 \003(\005\022\020\n\010buffIcon\030\003 \003(\t\022\n\n\002hp\030\004 \002(\005\022\016\n"
    "\006leftHp\030\005 \002(\005\022\017\n\007hpTypes\030\006 \002(\005", 630);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "battle.proto", &protobuf_RegisterTypes);
  PBattle::default_instance_ = new PBattle();
  PFightItem::default_instance_ = new PFightItem();
  PRound::default_instance_ = new PRound();
  Phurt::default_instance_ = new Phurt();
  PTarget::default_instance_ = new PTarget();
  PBattle::default_instance_->InitAsDefaultInstance();
  PFightItem::default_instance_->InitAsDefaultInstance();
  PRound::default_instance_->InitAsDefaultInstance();
  Phurt::default_instance_->InitAsDefaultInstance();
  PTarget::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_battle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_battle_2eproto {
  StaticDescriptorInitializer_battle_2eproto() {
    protobuf_AddDesc_battle_2eproto();
  }
} static_descriptor_initializer_battle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PBattle::kHerosFieldNumber;
const int PBattle::kRoundsFieldNumber;
const int PBattle::kCardsFieldNumber;
const int PBattle::kGoldFieldNumber;
const int PBattle::kExpFieldNumber;
#endif  // !_MSC_VER

PBattle::PBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBattle::InitAsDefaultInstance() {
}

PBattle::PBattle(const PBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBattle::SharedCtor() {
  _cached_size_ = 0;
  gold_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBattle::~PBattle() {
  SharedDtor();
}

void PBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBattle_descriptor_;
}

const PBattle& PBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

PBattle* PBattle::default_instance_ = NULL;

PBattle* PBattle::New() const {
  return new PBattle;
}

void PBattle::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    gold_ = 0;
    exp_ = 0;
  }
  heros_.Clear();
  rounds_.Clear();
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PFightItem heros = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_heros;
        if (input->ExpectTag(18)) goto parse_rounds;
        break;
      }

      // repeated .PRound rounds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rounds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rounds;
        if (input->ExpectTag(24)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cards;
        if (input->ExpectTag(32)) goto parse_gold;
        break;
      }

      // required int32 gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }

      // required int32 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PFightItem heros = 1;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->heros(i), output);
  }

  // repeated .PRound rounds = 2;
  for (int i = 0; i < this->rounds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rounds(i), output);
  }

  // repeated int32 cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cards(i), output);
  }

  // required int32 gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gold(), output);
  }

  // required int32 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PFightItem heros = 1;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->heros(i), target);
  }

  // repeated .PRound rounds = 2;
  for (int i = 0; i < this->rounds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rounds(i), target);
  }

  // repeated int32 cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->cards(i), target);
  }

  // required int32 gold = 4;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gold(), target);
  }

  // required int32 exp = 5;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // required int32 gold = 4;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // required int32 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  // repeated .PFightItem heros = 1;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  // repeated .PRound rounds = 2;
  total_size += 1 * this->rounds_size();
  for (int i = 0; i < this->rounds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rounds(i));
  }

  // repeated int32 cards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBattle::MergeFrom(const PBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  rounds_.MergeFrom(from.rounds_);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBattle::CopyFrom(const PBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;

  for (int i = 0; i < heros_size(); i++) {
    if (!this->heros(i).IsInitialized()) return false;
  }
  for (int i = 0; i < rounds_size(); i++) {
    if (!this->rounds(i).IsInitialized()) return false;
  }
  return true;
}

void PBattle::Swap(PBattle* other) {
  if (other != this) {
    heros_.Swap(&other->heros_);
    rounds_.Swap(&other->rounds_);
    cards_.Swap(&other->cards_);
    std::swap(gold_, other->gold_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBattle_descriptor_;
  metadata.reflection = PBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PFightItem::kIdFieldNumber;
const int PFightItem::kHpFieldNumber;
const int PFightItem::kNameFieldNumber;
const int PFightItem::kIconFieldNumber;
const int PFightItem::kAvatarFieldNumber;
const int PFightItem::kFriendIDFieldNumber;
const int PFightItem::kFriendNameFieldNumber;
const int PFightItem::kFriendIconFieldNumber;
const int PFightItem::kFriendAvatarFieldNumber;
#endif  // !_MSC_VER

PFightItem::PFightItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PFightItem::InitAsDefaultInstance() {
}

PFightItem::PFightItem(const PFightItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PFightItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  hp_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  friendid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  friendicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  friendavatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PFightItem::~PFightItem() {
  SharedDtor();
}

void PFightItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (friendid_ != &::google::protobuf::internal::kEmptyString) {
    delete friendid_;
  }
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (friendicon_ != &::google::protobuf::internal::kEmptyString) {
    delete friendicon_;
  }
  if (friendavatar_ != &::google::protobuf::internal::kEmptyString) {
    delete friendavatar_;
  }
  if (this != default_instance_) {
  }
}

void PFightItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PFightItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PFightItem_descriptor_;
}

const PFightItem& PFightItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

PFightItem* PFightItem::default_instance_ = NULL;

PFightItem* PFightItem::New() const {
  return new PFightItem;
}

void PFightItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    hp_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::kEmptyString) {
        avatar_->clear();
      }
    }
    if (has_friendid()) {
      if (friendid_ != &::google::protobuf::internal::kEmptyString) {
        friendid_->clear();
      }
    }
    if (has_friendname()) {
      if (friendname_ != &::google::protobuf::internal::kEmptyString) {
        friendname_->clear();
      }
    }
    if (has_friendicon()) {
      if (friendicon_ != &::google::protobuf::internal::kEmptyString) {
        friendicon_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_friendavatar()) {
      if (friendavatar_ != &::google::protobuf::internal::kEmptyString) {
        friendavatar_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PFightItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }

      // required int32 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_icon;
        break;
      }

      // required string icon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_avatar;
        break;
      }

      // required string avatar = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_friendID;
        break;
      }

      // required string friendID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendid().data(), this->friendid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_friendName;
        break;
      }

      // required string friendName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendname().data(), this->friendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_friendIcon;
        break;
      }

      // required string friendIcon = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendicon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendicon().data(), this->friendicon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_friendAvatar;
        break;
      }

      // required string friendAvatar = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendAvatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendavatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendavatar().data(), this->friendavatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PFightItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hp(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->icon(), output);
  }

  // required string avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->avatar(), output);
  }

  // required string friendID = 6;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendid().data(), this->friendid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->friendid(), output);
  }

  // required string friendName = 7;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->friendname(), output);
  }

  // required string friendIcon = 8;
  if (has_friendicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendicon().data(), this->friendicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->friendicon(), output);
  }

  // required string friendAvatar = 9;
  if (has_friendavatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendavatar().data(), this->friendavatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->friendavatar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PFightItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 hp = 2;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hp(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->icon(), target);
  }

  // required string avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->avatar(), target);
  }

  // required string friendID = 6;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendid().data(), this->friendid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->friendid(), target);
  }

  // required string friendName = 7;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->friendname(), target);
  }

  // required string friendIcon = 8;
  if (has_friendicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendicon().data(), this->friendicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->friendicon(), target);
  }

  // required string friendAvatar = 9;
  if (has_friendavatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendavatar().data(), this->friendavatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->friendavatar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PFightItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // required string avatar = 5;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // required string friendID = 6;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendid());
    }

    // required string friendName = 7;
    if (has_friendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendname());
    }

    // required string friendIcon = 8;
    if (has_friendicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendicon());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string friendAvatar = 9;
    if (has_friendavatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendavatar());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PFightItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PFightItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PFightItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PFightItem::MergeFrom(const PFightItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
    if (from.has_friendname()) {
      set_friendname(from.friendname());
    }
    if (from.has_friendicon()) {
      set_friendicon(from.friendicon());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_friendavatar()) {
      set_friendavatar(from.friendavatar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PFightItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PFightItem::CopyFrom(const PFightItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PFightItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void PFightItem::Swap(PFightItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hp_, other->hp_);
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    std::swap(avatar_, other->avatar_);
    std::swap(friendid_, other->friendid_);
    std::swap(friendname_, other->friendname_);
    std::swap(friendicon_, other->friendicon_);
    std::swap(friendavatar_, other->friendavatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PFightItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PFightItem_descriptor_;
  metadata.reflection = PFightItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PRound::kSourceFieldNumber;
const int PRound::kIsSkipFieldNumber;
const int PRound::kTargetFieldNumber;
const int PRound::kCardsFieldNumber;
const int PRound::kAoyiSkillIDFieldNumber;
const int PRound::kDelIconsFieldNumber;
const int PRound::kDelStatesFieldNumber;
const int PRound::kBuffHpsFieldNumber;
const int PRound::kLeftHpFieldNumber;
#endif  // !_MSC_VER

PRound::PRound()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PRound::InitAsDefaultInstance() {
}

PRound::PRound(const PRound& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PRound::SharedCtor() {
  _cached_size_ = 0;
  source_ = 0;
  isskip_ = false;
  target_ = 0;
  aoyiskillid_ = 0;
  lefthp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PRound::~PRound() {
  SharedDtor();
}

void PRound::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PRound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PRound::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PRound_descriptor_;
}

const PRound& PRound::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

PRound* PRound::default_instance_ = NULL;

PRound* PRound::New() const {
  return new PRound;
}

void PRound::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_ = 0;
    isskip_ = false;
    target_ = 0;
    aoyiskillid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lefthp_ = 0;
  }
  cards_.Clear();
  delicons_.Clear();
  delstates_.Clear();
  buffhps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PRound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isSkip;
        break;
      }

      // required bool isSkip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSkip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isskip_)));
          set_has_isskip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target;
        break;
      }

      // optional int32 target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cards;
        break;
      }

      // repeated .Phurt cards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cards;
        if (input->ExpectTag(40)) goto parse_aoyiSkillID;
        break;
      }

      // optional int32 aoyiSkillID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aoyiSkillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aoyiskillid_)));
          set_has_aoyiskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_delIcons;
        break;
      }

      // repeated string delIcons = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delIcons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_delicons()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->delicons(this->delicons_size() - 1).data(),
            this->delicons(this->delicons_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_delIcons;
        if (input->ExpectTag(56)) goto parse_delStates;
        break;
      }

      // repeated int32 delStates = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delStates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_delstates())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_delstates())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_delStates;
        if (input->ExpectTag(64)) goto parse_buffHps;
        break;
      }

      // repeated int32 buffHps = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffHps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_buffhps())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_buffhps())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_buffHps;
        if (input->ExpectTag(72)) goto parse_leftHp;
        break;
      }

      // required int32 leftHp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefthp_)));
          set_has_lefthp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PRound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->source(), output);
  }

  // required bool isSkip = 2;
  if (has_isskip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isskip(), output);
  }

  // optional int32 target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target(), output);
  }

  // repeated .Phurt cards = 4;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cards(i), output);
  }

  // optional int32 aoyiSkillID = 5;
  if (has_aoyiskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->aoyiskillid(), output);
  }

  // repeated string delIcons = 6;
  for (int i = 0; i < this->delicons_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->delicons(i).data(), this->delicons(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->delicons(i), output);
  }

  // repeated int32 delStates = 7;
  for (int i = 0; i < this->delstates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->delstates(i), output);
  }

  // repeated int32 buffHps = 8;
  for (int i = 0; i < this->buffhps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->buffhps(i), output);
  }

  // required int32 leftHp = 9;
  if (has_lefthp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lefthp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PRound::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 source = 1;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->source(), target);
  }

  // required bool isSkip = 2;
  if (has_isskip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isskip(), target);
  }

  // optional int32 target = 3;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->target(), target);
  }

  // repeated .Phurt cards = 4;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cards(i), target);
  }

  // optional int32 aoyiSkillID = 5;
  if (has_aoyiskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->aoyiskillid(), target);
  }

  // repeated string delIcons = 6;
  for (int i = 0; i < this->delicons_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->delicons(i).data(), this->delicons(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->delicons(i), target);
  }

  // repeated int32 delStates = 7;
  for (int i = 0; i < this->delstates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->delstates(i), target);
  }

  // repeated int32 buffHps = 8;
  for (int i = 0; i < this->buffhps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->buffhps(i), target);
  }

  // required int32 leftHp = 9;
  if (has_lefthp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lefthp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PRound::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source());
    }

    // required bool isSkip = 2;
    if (has_isskip()) {
      total_size += 1 + 1;
    }

    // optional int32 target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

    // optional int32 aoyiSkillID = 5;
    if (has_aoyiskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aoyiskillid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 leftHp = 9;
    if (has_lefthp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefthp());
    }

  }
  // repeated .Phurt cards = 4;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }

  // repeated string delIcons = 6;
  total_size += 1 * this->delicons_size();
  for (int i = 0; i < this->delicons_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->delicons(i));
  }

  // repeated int32 delStates = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->delstates_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->delstates(i));
    }
    total_size += 1 * this->delstates_size() + data_size;
  }

  // repeated int32 buffHps = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffhps_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->buffhps(i));
    }
    total_size += 1 * this->buffhps_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PRound::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PRound* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PRound*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PRound::MergeFrom(const PRound& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  delicons_.MergeFrom(from.delicons_);
  delstates_.MergeFrom(from.delstates_);
  buffhps_.MergeFrom(from.buffhps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_isskip()) {
      set_isskip(from.isskip());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_aoyiskillid()) {
      set_aoyiskillid(from.aoyiskillid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lefthp()) {
      set_lefthp(from.lefthp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PRound::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PRound::CopyFrom(const PRound& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRound::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000103) != 0x00000103) return false;

  for (int i = 0; i < cards_size(); i++) {
    if (!this->cards(i).IsInitialized()) return false;
  }
  return true;
}

void PRound::Swap(PRound* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(isskip_, other->isskip_);
    std::swap(target_, other->target_);
    cards_.Swap(&other->cards_);
    std::swap(aoyiskillid_, other->aoyiskillid_);
    delicons_.Swap(&other->delicons_);
    delstates_.Swap(&other->delstates_);
    buffhps_.Swap(&other->buffhps_);
    std::swap(lefthp_, other->lefthp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PRound::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PRound_descriptor_;
  metadata.reflection = PRound_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Phurt::kCardFieldNumber;
const int Phurt::kSkillIDFieldNumber;
const int Phurt::kTargetsFieldNumber;
#endif  // !_MSC_VER

Phurt::Phurt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Phurt::InitAsDefaultInstance() {
}

Phurt::Phurt(const Phurt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Phurt::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  skillid_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Phurt::~Phurt() {
  SharedDtor();
}

void Phurt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Phurt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Phurt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Phurt_descriptor_;
}

const Phurt& Phurt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

Phurt* Phurt::default_instance_ = NULL;

Phurt* Phurt::New() const {
  return new Phurt;
}

void Phurt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_ = 0;
    skillid_ = false;
  }
  targets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Phurt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillID;
        break;
      }

      // required bool skillID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_targets;
        break;
      }

      // repeated .PTarget targets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_targets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Phurt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card(), output);
  }

  // required bool skillID = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->skillid(), output);
  }

  // repeated .PTarget targets = 3;
  for (int i = 0; i < this->targets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->targets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Phurt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card(), target);
  }

  // required bool skillID = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->skillid(), target);
  }

  // repeated .PTarget targets = 3;
  for (int i = 0; i < this->targets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->targets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Phurt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // required bool skillID = 2;
    if (has_skillid()) {
      total_size += 1 + 1;
    }

  }
  // repeated .PTarget targets = 3;
  total_size += 1 * this->targets_size();
  for (int i = 0; i < this->targets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Phurt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Phurt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Phurt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Phurt::MergeFrom(const Phurt& from) {
  GOOGLE_CHECK_NE(&from, this);
  targets_.MergeFrom(from.targets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Phurt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Phurt::CopyFrom(const Phurt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Phurt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < targets_size(); i++) {
    if (!this->targets(i).IsInitialized()) return false;
  }
  return true;
}

void Phurt::Swap(Phurt* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(skillid_, other->skillid_);
    targets_.Swap(&other->targets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Phurt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Phurt_descriptor_;
  metadata.reflection = Phurt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PTarget::kTargetIDFieldNumber;
const int PTarget::kStateFieldNumber;
const int PTarget::kBuffIconFieldNumber;
const int PTarget::kHpFieldNumber;
const int PTarget::kLeftHpFieldNumber;
const int PTarget::kHpTypesFieldNumber;
#endif  // !_MSC_VER

PTarget::PTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PTarget::InitAsDefaultInstance() {
}

PTarget::PTarget(const PTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PTarget::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = 0;
  hp_ = 0;
  lefthp_ = 0;
  hptypes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PTarget::~PTarget() {
  SharedDtor();
}

void PTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PTarget_descriptor_;
}

const PTarget& PTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();
  return *default_instance_;
}

PTarget* PTarget::default_instance_ = NULL;

PTarget* PTarget::New() const {
  return new PTarget;
}

void PTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetid_ = 0;
    hp_ = 0;
    lefthp_ = 0;
    hptypes_ = 0;
  }
  state_.Clear();
  bufficon_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 targetID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // repeated int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_state())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_state())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        if (input->ExpectTag(26)) goto parse_buffIcon;
        break;
      }

      // repeated string buffIcon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bufficon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bufficon(this->bufficon_size() - 1).data(),
            this->bufficon(this->bufficon_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_buffIcon;
        if (input->ExpectTag(32)) goto parse_hp;
        break;
      }

      // required int32 hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_leftHp;
        break;
      }

      // required int32 leftHp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefthp_)));
          set_has_lefthp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hpTypes;
        break;
      }

      // required int32 hpTypes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpTypes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hptypes_)));
          set_has_hptypes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 targetID = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->targetid(), output);
  }

  // repeated int32 state = 2;
  for (int i = 0; i < this->state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->state(i), output);
  }

  // repeated string buffIcon = 3;
  for (int i = 0; i < this->bufficon_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->bufficon(i).data(), this->bufficon(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bufficon(i), output);
  }

  // required int32 hp = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hp(), output);
  }

  // required int32 leftHp = 5;
  if (has_lefthp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lefthp(), output);
  }

  // required int32 hpTypes = 6;
  if (has_hptypes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hptypes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 targetID = 1;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->targetid(), target);
  }

  // repeated int32 state = 2;
  for (int i = 0; i < this->state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->state(i), target);
  }

  // repeated string buffIcon = 3;
  for (int i = 0; i < this->bufficon_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bufficon(i).data(), this->bufficon(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->bufficon(i), target);
  }

  // required int32 hp = 4;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hp(), target);
  }

  // required int32 leftHp = 5;
  if (has_lefthp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lefthp(), target);
  }

  // required int32 hpTypes = 6;
  if (has_hptypes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hptypes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 targetID = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

    // required int32 hp = 4;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required int32 leftHp = 5;
    if (has_lefthp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefthp());
    }

    // required int32 hpTypes = 6;
    if (has_hptypes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hptypes());
    }

  }
  // repeated int32 state = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->state_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->state(i));
    }
    total_size += 1 * this->state_size() + data_size;
  }

  // repeated string buffIcon = 3;
  total_size += 1 * this->bufficon_size();
  for (int i = 0; i < this->bufficon_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bufficon(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PTarget::MergeFrom(const PTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  state_.MergeFrom(from.state_);
  bufficon_.MergeFrom(from.bufficon_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_lefthp()) {
      set_lefthp(from.lefthp());
    }
    if (from.has_hptypes()) {
      set_hptypes(from.hptypes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PTarget::CopyFrom(const PTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PTarget::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000039) != 0x00000039) return false;

  return true;
}

void PTarget::Swap(PTarget* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    state_.Swap(&other->state_);
    bufficon_.Swap(&other->bufficon_);
    std::swap(hp_, other->hp_);
    std::swap(lefthp_, other->lefthp_);
    std::swap(hptypes_, other->hptypes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PTarget_descriptor_;
  metadata.reflection = PTarget_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
