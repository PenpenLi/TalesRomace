// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fight.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fight.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PHit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PHit_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fight_2eproto() {
  protobuf_AddDesc_fight_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fight.proto");
  GOOGLE_CHECK(file != NULL);
  PHit_descriptor_ = file->message_type(0);
  static const int PHit_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, xid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, ismiss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, iscrh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, addbuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, delbuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, isdie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, axid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, ahp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, apos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, perhp_),
  };
  PHit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PHit_descriptor_,
      PHit::default_instance_,
      PHit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PHit));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fight_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PHit_descriptor_, &PHit::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fight_2eproto() {
  delete PHit::default_instance_;
  delete PHit_reflection_;
}

void protobuf_AddDesc_fight_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013fight.proto\"\303\001\n\004PHit\022\013\n\003xid\030\001 \002(\005\022\016\n\006i"
    "sMiss\030\002 \002(\010\022\r\n\005isCrh\030\003 \002(\010\022\n\n\002hp\030\004 \002(\005\022\017"
    "\n\007addBuff\030\005 \002(\005\022\017\n\007delBuff\030\006 \002(\005\022\r\n\005isDi"
    "e\030\007 \002(\010\022\r\n\005skill\030\010 \002(\005\022\014\n\004axid\030\t \002(\005\022\013\n\003"
    "ahp\030\n \002(\005\022\013\n\003pos\030\013 \002(\005\022\014\n\004apos\030\014 \002(\005\022\r\n\005"
    "perHp\030\r \002(\002", 211);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fight.proto", &protobuf_RegisterTypes);
  PHit::default_instance_ = new PHit();
  PHit::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fight_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fight_2eproto {
  StaticDescriptorInitializer_fight_2eproto() {
    protobuf_AddDesc_fight_2eproto();
  }
} static_descriptor_initializer_fight_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PHit::kXidFieldNumber;
const int PHit::kIsMissFieldNumber;
const int PHit::kIsCrhFieldNumber;
const int PHit::kHpFieldNumber;
const int PHit::kAddBuffFieldNumber;
const int PHit::kDelBuffFieldNumber;
const int PHit::kIsDieFieldNumber;
const int PHit::kSkillFieldNumber;
const int PHit::kAxidFieldNumber;
const int PHit::kAhpFieldNumber;
const int PHit::kPosFieldNumber;
const int PHit::kAposFieldNumber;
const int PHit::kPerHpFieldNumber;
#endif  // !_MSC_VER

PHit::PHit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PHit::InitAsDefaultInstance() {
}

PHit::PHit(const PHit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PHit::SharedCtor() {
  _cached_size_ = 0;
  xid_ = 0;
  ismiss_ = false;
  iscrh_ = false;
  hp_ = 0;
  addbuff_ = 0;
  delbuff_ = 0;
  isdie_ = false;
  skill_ = 0;
  axid_ = 0;
  ahp_ = 0;
  pos_ = 0;
  apos_ = 0;
  perhp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PHit::~PHit() {
  SharedDtor();
}

void PHit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PHit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PHit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PHit_descriptor_;
}

const PHit& PHit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fight_2eproto();
  return *default_instance_;
}

PHit* PHit::default_instance_ = NULL;

PHit* PHit::New() const {
  return new PHit;
}

void PHit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    xid_ = 0;
    ismiss_ = false;
    iscrh_ = false;
    hp_ = 0;
    addbuff_ = 0;
    delbuff_ = 0;
    isdie_ = false;
    skill_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    axid_ = 0;
    ahp_ = 0;
    pos_ = 0;
    apos_ = 0;
    perhp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PHit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 xid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xid_)));
          set_has_xid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isMiss;
        break;
      }

      // required bool isMiss = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMiss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismiss_)));
          set_has_ismiss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isCrh;
        break;
      }

      // required bool isCrh = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCrh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscrh_)));
          set_has_iscrh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hp;
        break;
      }

      // required int32 hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_addBuff;
        break;
      }

      // required int32 addBuff = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addBuff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addbuff_)));
          set_has_addbuff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_delBuff;
        break;
      }

      // required int32 delBuff = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delBuff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delbuff_)));
          set_has_delbuff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isDie;
        break;
      }

      // required bool isDie = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdie_)));
          set_has_isdie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_skill;
        break;
      }

      // required int32 skill = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_axid;
        break;
      }

      // required int32 axid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_axid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axid_)));
          set_has_axid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ahp;
        break;
      }

      // required int32 ahp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ahp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ahp_)));
          set_has_ahp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_pos;
        break;
      }

      // required int32 pos = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_apos;
        break;
      }

      // required int32 apos = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apos_)));
          set_has_apos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_perHp;
        break;
      }

      // required float perHp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_perHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &perhp_)));
          set_has_perhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PHit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 xid = 1;
  if (has_xid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->xid(), output);
  }

  // required bool isMiss = 2;
  if (has_ismiss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ismiss(), output);
  }

  // required bool isCrh = 3;
  if (has_iscrh()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->iscrh(), output);
  }

  // required int32 hp = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hp(), output);
  }

  // required int32 addBuff = 5;
  if (has_addbuff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->addbuff(), output);
  }

  // required int32 delBuff = 6;
  if (has_delbuff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->delbuff(), output);
  }

  // required bool isDie = 7;
  if (has_isdie()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isdie(), output);
  }

  // required int32 skill = 8;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->skill(), output);
  }

  // required int32 axid = 9;
  if (has_axid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->axid(), output);
  }

  // required int32 ahp = 10;
  if (has_ahp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ahp(), output);
  }

  // required int32 pos = 11;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->pos(), output);
  }

  // required int32 apos = 12;
  if (has_apos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->apos(), output);
  }

  // required float perHp = 13;
  if (has_perhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->perhp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PHit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 xid = 1;
  if (has_xid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->xid(), target);
  }

  // required bool isMiss = 2;
  if (has_ismiss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ismiss(), target);
  }

  // required bool isCrh = 3;
  if (has_iscrh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->iscrh(), target);
  }

  // required int32 hp = 4;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hp(), target);
  }

  // required int32 addBuff = 5;
  if (has_addbuff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->addbuff(), target);
  }

  // required int32 delBuff = 6;
  if (has_delbuff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->delbuff(), target);
  }

  // required bool isDie = 7;
  if (has_isdie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isdie(), target);
  }

  // required int32 skill = 8;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->skill(), target);
  }

  // required int32 axid = 9;
  if (has_axid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->axid(), target);
  }

  // required int32 ahp = 10;
  if (has_ahp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ahp(), target);
  }

  // required int32 pos = 11;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->pos(), target);
  }

  // required int32 apos = 12;
  if (has_apos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->apos(), target);
  }

  // required float perHp = 13;
  if (has_perhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->perhp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PHit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 xid = 1;
    if (has_xid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xid());
    }

    // required bool isMiss = 2;
    if (has_ismiss()) {
      total_size += 1 + 1;
    }

    // required bool isCrh = 3;
    if (has_iscrh()) {
      total_size += 1 + 1;
    }

    // required int32 hp = 4;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required int32 addBuff = 5;
    if (has_addbuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addbuff());
    }

    // required int32 delBuff = 6;
    if (has_delbuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delbuff());
    }

    // required bool isDie = 7;
    if (has_isdie()) {
      total_size += 1 + 1;
    }

    // required int32 skill = 8;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 axid = 9;
    if (has_axid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axid());
    }

    // required int32 ahp = 10;
    if (has_ahp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ahp());
    }

    // required int32 pos = 11;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // required int32 apos = 12;
    if (has_apos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->apos());
    }

    // required float perHp = 13;
    if (has_perhp()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PHit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PHit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PHit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PHit::MergeFrom(const PHit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xid()) {
      set_xid(from.xid());
    }
    if (from.has_ismiss()) {
      set_ismiss(from.ismiss());
    }
    if (from.has_iscrh()) {
      set_iscrh(from.iscrh());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_addbuff()) {
      set_addbuff(from.addbuff());
    }
    if (from.has_delbuff()) {
      set_delbuff(from.delbuff());
    }
    if (from.has_isdie()) {
      set_isdie(from.isdie());
    }
    if (from.has_skill()) {
      set_skill(from.skill());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_axid()) {
      set_axid(from.axid());
    }
    if (from.has_ahp()) {
      set_ahp(from.ahp());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_apos()) {
      set_apos(from.apos());
    }
    if (from.has_perhp()) {
      set_perhp(from.perhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PHit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PHit::CopyFrom(const PHit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PHit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void PHit::Swap(PHit* other) {
  if (other != this) {
    std::swap(xid_, other->xid_);
    std::swap(ismiss_, other->ismiss_);
    std::swap(iscrh_, other->iscrh_);
    std::swap(hp_, other->hp_);
    std::swap(addbuff_, other->addbuff_);
    std::swap(delbuff_, other->delbuff_);
    std::swap(isdie_, other->isdie_);
    std::swap(skill_, other->skill_);
    std::swap(axid_, other->axid_);
    std::swap(ahp_, other->ahp_);
    std::swap(pos_, other->pos_);
    std::swap(apos_, other->apos_);
    std::swap(perhp_, other->perhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PHit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PHit_descriptor_;
  metadata.reflection = PHit_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
