// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hero.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hero.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PAscend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PAscend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PEvolve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PEvolve_reflection_ = NULL;
const ::google::protobuf::Descriptor* PMutation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PMutation_reflection_ = NULL;
const ::google::protobuf::Descriptor* PCallHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PCallHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* PGoldQualityUpgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PGoldQualityUpgrade_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hero_2eproto() {
  protobuf_AddDesc_hero_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hero.proto");
  GOOGLE_CHECK(file != NULL);
  PAscend_descriptor_ = file->message_type(0);
  static const int PAscend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAscend, heroid_),
  };
  PAscend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PAscend_descriptor_,
      PAscend::default_instance_,
      PAscend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAscend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAscend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PAscend));
  PEvolve_descriptor_ = file->message_type(1);
  static const int PEvolve_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEvolve, heroid_),
  };
  PEvolve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PEvolve_descriptor_,
      PEvolve::default_instance_,
      PEvolve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEvolve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEvolve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PEvolve));
  PMutation_descriptor_ = file->message_type(2);
  static const int PMutation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMutation, heroid_),
  };
  PMutation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PMutation_descriptor_,
      PMutation::default_instance_,
      PMutation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMutation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMutation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PMutation));
  PCallHero_descriptor_ = file->message_type(3);
  static const int PCallHero_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PCallHero, heroid_),
  };
  PCallHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PCallHero_descriptor_,
      PCallHero::default_instance_,
      PCallHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PCallHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PCallHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PCallHero));
  PGoldQualityUpgrade_descriptor_ = file->message_type(4);
  static const int PGoldQualityUpgrade_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGoldQualityUpgrade, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGoldQualityUpgrade, changeflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGoldQualityUpgrade, skillid_),
  };
  PGoldQualityUpgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PGoldQualityUpgrade_descriptor_,
      PGoldQualityUpgrade::default_instance_,
      PGoldQualityUpgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGoldQualityUpgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGoldQualityUpgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PGoldQualityUpgrade));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hero_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PAscend_descriptor_, &PAscend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PEvolve_descriptor_, &PEvolve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PMutation_descriptor_, &PMutation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PCallHero_descriptor_, &PCallHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PGoldQualityUpgrade_descriptor_, &PGoldQualityUpgrade::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hero_2eproto() {
  delete PAscend::default_instance_;
  delete PAscend_reflection_;
  delete PEvolve::default_instance_;
  delete PEvolve_reflection_;
  delete PMutation::default_instance_;
  delete PMutation_reflection_;
  delete PCallHero::default_instance_;
  delete PCallHero_reflection_;
  delete PGoldQualityUpgrade::default_instance_;
  delete PGoldQualityUpgrade_reflection_;
}

void protobuf_AddDesc_hero_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nhero.proto\"\031\n\007PAscend\022\016\n\006heroId\030\001 \002(\003\""
    "\031\n\007PEvolve\022\016\n\006heroId\030\001 \002(\003\"\033\n\tPMutation\022"
    "\016\n\006heroId\030\001 \002(\003\"\033\n\tPCallHero\022\016\n\006heroId\030\001"
    " \002(\005\"J\n\023PGoldQualityUpgrade\022\016\n\006result\030\001 "
    "\002(\005\022\022\n\nchangeFlag\030\002 \001(\005\022\017\n\007skillId\030\003 \001(\005"
    "B.\n com.doteyplay.game.message.protoB\nHe"
    "roProBuf", 248);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hero.proto", &protobuf_RegisterTypes);
  PAscend::default_instance_ = new PAscend();
  PEvolve::default_instance_ = new PEvolve();
  PMutation::default_instance_ = new PMutation();
  PCallHero::default_instance_ = new PCallHero();
  PGoldQualityUpgrade::default_instance_ = new PGoldQualityUpgrade();
  PAscend::default_instance_->InitAsDefaultInstance();
  PEvolve::default_instance_->InitAsDefaultInstance();
  PMutation::default_instance_->InitAsDefaultInstance();
  PCallHero::default_instance_->InitAsDefaultInstance();
  PGoldQualityUpgrade::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hero_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hero_2eproto {
  StaticDescriptorInitializer_hero_2eproto() {
    protobuf_AddDesc_hero_2eproto();
  }
} static_descriptor_initializer_hero_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PAscend::kHeroIdFieldNumber;
#endif  // !_MSC_VER

PAscend::PAscend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PAscend::InitAsDefaultInstance() {
}

PAscend::PAscend(const PAscend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PAscend::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PAscend::~PAscend() {
  SharedDtor();
}

void PAscend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PAscend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PAscend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PAscend_descriptor_;
}

const PAscend& PAscend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

PAscend* PAscend::default_instance_ = NULL;

PAscend* PAscend::New() const {
  return new PAscend;
}

void PAscend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PAscend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 heroId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PAscend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 heroId = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PAscend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 heroId = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PAscend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 heroId = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PAscend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PAscend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PAscend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PAscend::MergeFrom(const PAscend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PAscend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PAscend::CopyFrom(const PAscend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PAscend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PAscend::Swap(PAscend* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PAscend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PAscend_descriptor_;
  metadata.reflection = PAscend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PEvolve::kHeroIdFieldNumber;
#endif  // !_MSC_VER

PEvolve::PEvolve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PEvolve::InitAsDefaultInstance() {
}

PEvolve::PEvolve(const PEvolve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PEvolve::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PEvolve::~PEvolve() {
  SharedDtor();
}

void PEvolve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PEvolve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PEvolve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PEvolve_descriptor_;
}

const PEvolve& PEvolve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

PEvolve* PEvolve::default_instance_ = NULL;

PEvolve* PEvolve::New() const {
  return new PEvolve;
}

void PEvolve::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PEvolve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 heroId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PEvolve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 heroId = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PEvolve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 heroId = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PEvolve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 heroId = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PEvolve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PEvolve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PEvolve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PEvolve::MergeFrom(const PEvolve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PEvolve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PEvolve::CopyFrom(const PEvolve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PEvolve::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PEvolve::Swap(PEvolve* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PEvolve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PEvolve_descriptor_;
  metadata.reflection = PEvolve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PMutation::kHeroIdFieldNumber;
#endif  // !_MSC_VER

PMutation::PMutation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PMutation::InitAsDefaultInstance() {
}

PMutation::PMutation(const PMutation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PMutation::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PMutation::~PMutation() {
  SharedDtor();
}

void PMutation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PMutation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PMutation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PMutation_descriptor_;
}

const PMutation& PMutation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

PMutation* PMutation::default_instance_ = NULL;

PMutation* PMutation::New() const {
  return new PMutation;
}

void PMutation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PMutation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 heroId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PMutation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 heroId = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PMutation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 heroId = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PMutation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 heroId = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PMutation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PMutation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PMutation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PMutation::MergeFrom(const PMutation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PMutation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PMutation::CopyFrom(const PMutation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMutation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PMutation::Swap(PMutation* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PMutation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PMutation_descriptor_;
  metadata.reflection = PMutation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PCallHero::kHeroIdFieldNumber;
#endif  // !_MSC_VER

PCallHero::PCallHero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PCallHero::InitAsDefaultInstance() {
}

PCallHero::PCallHero(const PCallHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PCallHero::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PCallHero::~PCallHero() {
  SharedDtor();
}

void PCallHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PCallHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PCallHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PCallHero_descriptor_;
}

const PCallHero& PCallHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

PCallHero* PCallHero::default_instance_ = NULL;

PCallHero* PCallHero::New() const {
  return new PCallHero;
}

void PCallHero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PCallHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 heroId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PCallHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 heroId = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PCallHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 heroId = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PCallHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 heroId = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PCallHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PCallHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PCallHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PCallHero::MergeFrom(const PCallHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PCallHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PCallHero::CopyFrom(const PCallHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCallHero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PCallHero::Swap(PCallHero* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PCallHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PCallHero_descriptor_;
  metadata.reflection = PCallHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PGoldQualityUpgrade::kResultFieldNumber;
const int PGoldQualityUpgrade::kChangeFlagFieldNumber;
const int PGoldQualityUpgrade::kSkillIdFieldNumber;
#endif  // !_MSC_VER

PGoldQualityUpgrade::PGoldQualityUpgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PGoldQualityUpgrade::InitAsDefaultInstance() {
}

PGoldQualityUpgrade::PGoldQualityUpgrade(const PGoldQualityUpgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PGoldQualityUpgrade::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  changeflag_ = 0;
  skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PGoldQualityUpgrade::~PGoldQualityUpgrade() {
  SharedDtor();
}

void PGoldQualityUpgrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PGoldQualityUpgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PGoldQualityUpgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PGoldQualityUpgrade_descriptor_;
}

const PGoldQualityUpgrade& PGoldQualityUpgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();
  return *default_instance_;
}

PGoldQualityUpgrade* PGoldQualityUpgrade::default_instance_ = NULL;

PGoldQualityUpgrade* PGoldQualityUpgrade::New() const {
  return new PGoldQualityUpgrade;
}

void PGoldQualityUpgrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    changeflag_ = 0;
    skillid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PGoldQualityUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_changeFlag;
        break;
      }

      // optional int32 changeFlag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changeFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changeflag_)));
          set_has_changeflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillId;
        break;
      }

      // optional int32 skillId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PGoldQualityUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 changeFlag = 2;
  if (has_changeflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->changeflag(), output);
  }

  // optional int32 skillId = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PGoldQualityUpgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 changeFlag = 2;
  if (has_changeflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->changeflag(), target);
  }

  // optional int32 skillId = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PGoldQualityUpgrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 changeFlag = 2;
    if (has_changeflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changeflag());
    }

    // optional int32 skillId = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PGoldQualityUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PGoldQualityUpgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PGoldQualityUpgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PGoldQualityUpgrade::MergeFrom(const PGoldQualityUpgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_changeflag()) {
      set_changeflag(from.changeflag());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PGoldQualityUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PGoldQualityUpgrade::CopyFrom(const PGoldQualityUpgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PGoldQualityUpgrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PGoldQualityUpgrade::Swap(PGoldQualityUpgrade* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(changeflag_, other->changeflag_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PGoldQualityUpgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PGoldQualityUpgrade_descriptor_;
  metadata.reflection = PGoldQualityUpgrade_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
