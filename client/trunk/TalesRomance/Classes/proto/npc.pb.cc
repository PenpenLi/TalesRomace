// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: npc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "npc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PNpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PNpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* PAddOrRemoveNpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PAddOrRemoveNpc_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_npc_2eproto() {
  protobuf_AddDesc_npc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "npc.proto");
  GOOGLE_CHECK(file != NULL);
  PNpc_descriptor_ = file->message_type(0);
  static const int PNpc_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNpc, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNpc, npcname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNpc, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNpc, skillidlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNpc, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNpc, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNpc, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNpc, spriteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNpc, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNpc, equiplist_),
  };
  PNpc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PNpc_descriptor_,
      PNpc::default_instance_,
      PNpc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNpc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNpc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PNpc));
  PAddOrRemoveNpc_descriptor_ = file->message_type(1);
  static const int PAddOrRemoveNpc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAddOrRemoveNpc, npcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAddOrRemoveNpc, addorremove_),
  };
  PAddOrRemoveNpc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PAddOrRemoveNpc_descriptor_,
      PAddOrRemoveNpc::default_instance_,
      PAddOrRemoveNpc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAddOrRemoveNpc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAddOrRemoveNpc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PAddOrRemoveNpc));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_npc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PNpc_descriptor_, &PNpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PAddOrRemoveNpc_descriptor_, &PAddOrRemoveNpc::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_npc_2eproto() {
  delete PNpc::default_instance_;
  delete PNpc_reflection_;
  delete PAddOrRemoveNpc::default_instance_;
  delete PAddOrRemoveNpc_reflection_;
}

void protobuf_AddDesc_npc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_item_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tnpc.proto\032\nitem.proto\"\263\001\n\004PNpc\022\016\n\006role"
    "Id\030\001 \002(\003\022\017\n\007npcName\030\002 \002(\t\022\r\n\005level\030\003 \002(\005"
    "\022\023\n\013skillIdList\030\004 \003(\005\022\017\n\007quality\030\005 \002(\005\022\014"
    "\n\004star\030\006 \002(\005\022\r\n\005npcId\030\007 \002(\003\022\020\n\010spriteId\030"
    "\010 \002(\005\022\013\n\003exp\030\t \002(\005\022\031\n\tequipList\030\n \003(\0132\006."
    "PItem\";\n\017PAddOrRemoveNpc\022\023\n\004npcs\030\001 \003(\0132\005"
    ".PNpc\022\023\n\013addOrRemove\030\002 \002(\010B-\n com.doteyp"
    "lay.game.message.protoB\tNpcProBuf", 313);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "npc.proto", &protobuf_RegisterTypes);
  PNpc::default_instance_ = new PNpc();
  PAddOrRemoveNpc::default_instance_ = new PAddOrRemoveNpc();
  PNpc::default_instance_->InitAsDefaultInstance();
  PAddOrRemoveNpc::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_npc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_npc_2eproto {
  StaticDescriptorInitializer_npc_2eproto() {
    protobuf_AddDesc_npc_2eproto();
  }
} static_descriptor_initializer_npc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PNpc::kRoleIdFieldNumber;
const int PNpc::kNpcNameFieldNumber;
const int PNpc::kLevelFieldNumber;
const int PNpc::kSkillIdListFieldNumber;
const int PNpc::kQualityFieldNumber;
const int PNpc::kStarFieldNumber;
const int PNpc::kNpcIdFieldNumber;
const int PNpc::kSpriteIdFieldNumber;
const int PNpc::kExpFieldNumber;
const int PNpc::kEquipListFieldNumber;
#endif  // !_MSC_VER

PNpc::PNpc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PNpc::InitAsDefaultInstance() {
}

PNpc::PNpc(const PNpc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PNpc::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_LONGLONG(0);
  npcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  quality_ = 0;
  star_ = 0;
  npcid_ = GOOGLE_LONGLONG(0);
  spriteid_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PNpc::~PNpc() {
  SharedDtor();
}

void PNpc::SharedDtor() {
  if (npcname_ != &::google::protobuf::internal::kEmptyString) {
    delete npcname_;
  }
  if (this != default_instance_) {
  }
}

void PNpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PNpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PNpc_descriptor_;
}

const PNpc& PNpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_npc_2eproto();
  return *default_instance_;
}

PNpc* PNpc::default_instance_ = NULL;

PNpc* PNpc::New() const {
  return new PNpc;
}

void PNpc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_LONGLONG(0);
    if (has_npcname()) {
      if (npcname_ != &::google::protobuf::internal::kEmptyString) {
        npcname_->clear();
      }
    }
    level_ = 0;
    quality_ = 0;
    star_ = 0;
    npcid_ = GOOGLE_LONGLONG(0);
    spriteid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    exp_ = 0;
  }
  skillidlist_.Clear();
  equiplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PNpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_npcName;
        break;
      }

      // required string npcName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npcName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_npcname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->npcname().data(), this->npcname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skillIdList;
        break;
      }

      // repeated int32 skillIdList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillIdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_skillidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skillidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skillIdList;
        if (input->ExpectTag(40)) goto parse_quality;
        break;
      }

      // required int32 quality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_star;
        break;
      }

      // required int32 star = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_npcId;
        break;
      }

      // required int64 npcId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npcId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_spriteId;
        break;
      }

      // required int32 spriteId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spriteId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spriteid_)));
          set_has_spriteid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_exp;
        break;
      }

      // required int32 exp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_equipList;
        break;
      }

      // repeated .PItem equipList = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equiplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_equipList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PNpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleid(), output);
  }

  // required string npcName = 2;
  if (has_npcname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->npcname().data(), this->npcname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->npcname(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // repeated int32 skillIdList = 4;
  for (int i = 0; i < this->skillidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->skillidlist(i), output);
  }

  // required int32 quality = 5;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->quality(), output);
  }

  // required int32 star = 6;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->star(), output);
  }

  // required int64 npcId = 7;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->npcid(), output);
  }

  // required int32 spriteId = 8;
  if (has_spriteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->spriteid(), output);
  }

  // required int32 exp = 9;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->exp(), output);
  }

  // repeated .PItem equipList = 10;
  for (int i = 0; i < this->equiplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->equiplist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PNpc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->roleid(), target);
  }

  // required string npcName = 2;
  if (has_npcname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->npcname().data(), this->npcname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->npcname(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // repeated int32 skillIdList = 4;
  for (int i = 0; i < this->skillidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->skillidlist(i), target);
  }

  // required int32 quality = 5;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->quality(), target);
  }

  // required int32 star = 6;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->star(), target);
  }

  // required int64 npcId = 7;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->npcid(), target);
  }

  // required int32 spriteId = 8;
  if (has_spriteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->spriteid(), target);
  }

  // required int32 exp = 9;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->exp(), target);
  }

  // repeated .PItem equipList = 10;
  for (int i = 0; i < this->equiplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->equiplist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PNpc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

    // required string npcName = 2;
    if (has_npcname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->npcname());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 quality = 5;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // required int32 star = 6;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // required int64 npcId = 7;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->npcid());
    }

    // required int32 spriteId = 8;
    if (has_spriteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spriteid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 exp = 9;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  // repeated int32 skillIdList = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skillidlist(i));
    }
    total_size += 1 * this->skillidlist_size() + data_size;
  }

  // repeated .PItem equipList = 10;
  total_size += 1 * this->equiplist_size();
  for (int i = 0; i < this->equiplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equiplist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PNpc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PNpc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PNpc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PNpc::MergeFrom(const PNpc& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillidlist_.MergeFrom(from.skillidlist_);
  equiplist_.MergeFrom(from.equiplist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_npcname()) {
      set_npcname(from.npcname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_spriteid()) {
      set_spriteid(from.spriteid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PNpc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNpc::CopyFrom(const PNpc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNpc::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001f7) != 0x000001f7) return false;

  for (int i = 0; i < equiplist_size(); i++) {
    if (!this->equiplist(i).IsInitialized()) return false;
  }
  return true;
}

void PNpc::Swap(PNpc* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(npcname_, other->npcname_);
    std::swap(level_, other->level_);
    skillidlist_.Swap(&other->skillidlist_);
    std::swap(quality_, other->quality_);
    std::swap(star_, other->star_);
    std::swap(npcid_, other->npcid_);
    std::swap(spriteid_, other->spriteid_);
    std::swap(exp_, other->exp_);
    equiplist_.Swap(&other->equiplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PNpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PNpc_descriptor_;
  metadata.reflection = PNpc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PAddOrRemoveNpc::kNpcsFieldNumber;
const int PAddOrRemoveNpc::kAddOrRemoveFieldNumber;
#endif  // !_MSC_VER

PAddOrRemoveNpc::PAddOrRemoveNpc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PAddOrRemoveNpc::InitAsDefaultInstance() {
}

PAddOrRemoveNpc::PAddOrRemoveNpc(const PAddOrRemoveNpc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PAddOrRemoveNpc::SharedCtor() {
  _cached_size_ = 0;
  addorremove_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PAddOrRemoveNpc::~PAddOrRemoveNpc() {
  SharedDtor();
}

void PAddOrRemoveNpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PAddOrRemoveNpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PAddOrRemoveNpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PAddOrRemoveNpc_descriptor_;
}

const PAddOrRemoveNpc& PAddOrRemoveNpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_npc_2eproto();
  return *default_instance_;
}

PAddOrRemoveNpc* PAddOrRemoveNpc::default_instance_ = NULL;

PAddOrRemoveNpc* PAddOrRemoveNpc::New() const {
  return new PAddOrRemoveNpc;
}

void PAddOrRemoveNpc::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    addorremove_ = false;
  }
  npcs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PAddOrRemoveNpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PNpc npcs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npcs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npcs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_npcs;
        if (input->ExpectTag(16)) goto parse_addOrRemove;
        break;
      }

      // required bool addOrRemove = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addOrRemove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &addorremove_)));
          set_has_addorremove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PAddOrRemoveNpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PNpc npcs = 1;
  for (int i = 0; i < this->npcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->npcs(i), output);
  }

  // required bool addOrRemove = 2;
  if (has_addorremove()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->addorremove(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PAddOrRemoveNpc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PNpc npcs = 1;
  for (int i = 0; i < this->npcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->npcs(i), target);
  }

  // required bool addOrRemove = 2;
  if (has_addorremove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->addorremove(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PAddOrRemoveNpc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool addOrRemove = 2;
    if (has_addorremove()) {
      total_size += 1 + 1;
    }

  }
  // repeated .PNpc npcs = 1;
  total_size += 1 * this->npcs_size();
  for (int i = 0; i < this->npcs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npcs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PAddOrRemoveNpc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PAddOrRemoveNpc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PAddOrRemoveNpc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PAddOrRemoveNpc::MergeFrom(const PAddOrRemoveNpc& from) {
  GOOGLE_CHECK_NE(&from, this);
  npcs_.MergeFrom(from.npcs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_addorremove()) {
      set_addorremove(from.addorremove());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PAddOrRemoveNpc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PAddOrRemoveNpc::CopyFrom(const PAddOrRemoveNpc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PAddOrRemoveNpc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < npcs_size(); i++) {
    if (!this->npcs(i).IsInitialized()) return false;
  }
  return true;
}

void PAddOrRemoveNpc::Swap(PAddOrRemoveNpc* other) {
  if (other != this) {
    npcs_.Swap(&other->npcs_);
    std::swap(addorremove_, other->addorremove_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PAddOrRemoveNpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PAddOrRemoveNpc_descriptor_;
  metadata.reflection = PAddOrRemoveNpc_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
