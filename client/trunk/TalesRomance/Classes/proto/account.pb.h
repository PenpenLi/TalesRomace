// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: account.proto

#ifndef PROTOBUF_account_2eproto__INCLUDED
#define PROTOBUF_account_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "item.pb.h"
#include "gate.pb.h"
#include "npc.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_account_2eproto();
void protobuf_AssignDesc_account_2eproto();
void protobuf_ShutdownFile_account_2eproto();

class LoginReq;
class PGroup;
class LoginResp;
class PSaveGroups;
class PRole;
class PUpRole;

// ===================================================================

class LoginReq : public ::google::protobuf::Message {
 public:
  LoginReq();
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginReq& default_instance();

  void Swap(LoginReq* other);

  // implements Message ----------------------------------------------

  LoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required int32 areaId = 3;
  inline bool has_areaid() const;
  inline void clear_areaid();
  static const int kAreaIdFieldNumber = 3;
  inline ::google::protobuf::int32 areaid() const;
  inline void set_areaid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LoginReq)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_areaid();
  inline void clear_has_areaid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* key_;
  ::google::protobuf::int32 areaid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static LoginReq* default_instance_;
};
// -------------------------------------------------------------------

class PGroup : public ::google::protobuf::Message {
 public:
  PGroup();
  virtual ~PGroup();

  PGroup(const PGroup& from);

  inline PGroup& operator=(const PGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PGroup& default_instance();

  void Swap(PGroup* other);

  // implements Message ----------------------------------------------

  PGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PGroup& from);
  void MergeFrom(const PGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 groupId = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // repeated int64 npcId = 2;
  inline int npcid_size() const;
  inline void clear_npcid();
  static const int kNpcIdFieldNumber = 2;
  inline ::google::protobuf::int64 npcid(int index) const;
  inline void set_npcid(int index, ::google::protobuf::int64 value);
  inline void add_npcid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      npcid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_npcid();

  // @@protoc_insertion_point(class_scope:PGroup)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > npcid_;
  ::google::protobuf::int32 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static PGroup* default_instance_;
};
// -------------------------------------------------------------------

class LoginResp : public ::google::protobuf::Message {
 public:
  LoginResp();
  virtual ~LoginResp();

  LoginResp(const LoginResp& from);

  inline LoginResp& operator=(const LoginResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResp& default_instance();

  void Swap(LoginResp* other);

  // implements Message ----------------------------------------------

  LoginResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResp& from);
  void MergeFrom(const LoginResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .PRole role = 2;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 2;
  inline const ::PRole& role() const;
  inline ::PRole* mutable_role();
  inline ::PRole* release_role();
  inline void set_allocated_role(::PRole* role);

  // repeated .PItem itemList = 3;
  inline int itemlist_size() const;
  inline void clear_itemlist();
  static const int kItemListFieldNumber = 3;
  inline const ::PItem& itemlist(int index) const;
  inline ::PItem* mutable_itemlist(int index);
  inline ::PItem* add_itemlist();
  inline const ::google::protobuf::RepeatedPtrField< ::PItem >&
      itemlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PItem >*
      mutable_itemlist();

  // repeated .PNpc npcList = 4;
  inline int npclist_size() const;
  inline void clear_npclist();
  static const int kNpcListFieldNumber = 4;
  inline const ::PNpc& npclist(int index) const;
  inline ::PNpc* mutable_npclist(int index);
  inline ::PNpc* add_npclist();
  inline const ::google::protobuf::RepeatedPtrField< ::PNpc >&
      npclist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PNpc >*
      mutable_npclist();

  // optional .PGateResp gate = 5;
  inline bool has_gate() const;
  inline void clear_gate();
  static const int kGateFieldNumber = 5;
  inline const ::PGateResp& gate() const;
  inline ::PGateResp* mutable_gate();
  inline ::PGateResp* release_gate();
  inline void set_allocated_gate(::PGateResp* gate);

  // repeated .PGroup groups = 6;
  inline int groups_size() const;
  inline void clear_groups();
  static const int kGroupsFieldNumber = 6;
  inline const ::PGroup& groups(int index) const;
  inline ::PGroup* mutable_groups(int index);
  inline ::PGroup* add_groups();
  inline const ::google::protobuf::RepeatedPtrField< ::PGroup >&
      groups() const;
  inline ::google::protobuf::RepeatedPtrField< ::PGroup >*
      mutable_groups();

  // @@protoc_insertion_point(class_scope:LoginResp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_gate();
  inline void clear_has_gate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PRole* role_;
  ::google::protobuf::RepeatedPtrField< ::PItem > itemlist_;
  ::google::protobuf::RepeatedPtrField< ::PNpc > npclist_;
  ::PGateResp* gate_;
  ::google::protobuf::RepeatedPtrField< ::PGroup > groups_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static LoginResp* default_instance_;
};
// -------------------------------------------------------------------

class PSaveGroups : public ::google::protobuf::Message {
 public:
  PSaveGroups();
  virtual ~PSaveGroups();

  PSaveGroups(const PSaveGroups& from);

  inline PSaveGroups& operator=(const PSaveGroups& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PSaveGroups& default_instance();

  void Swap(PSaveGroups* other);

  // implements Message ----------------------------------------------

  PSaveGroups* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PSaveGroups& from);
  void MergeFrom(const PSaveGroups& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PGroup groups = 6;
  inline int groups_size() const;
  inline void clear_groups();
  static const int kGroupsFieldNumber = 6;
  inline const ::PGroup& groups(int index) const;
  inline ::PGroup* mutable_groups(int index);
  inline ::PGroup* add_groups();
  inline const ::google::protobuf::RepeatedPtrField< ::PGroup >&
      groups() const;
  inline ::google::protobuf::RepeatedPtrField< ::PGroup >*
      mutable_groups();

  // @@protoc_insertion_point(class_scope:PSaveGroups)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PGroup > groups_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static PSaveGroups* default_instance_;
};
// -------------------------------------------------------------------

class PRole : public ::google::protobuf::Message {
 public:
  PRole();
  virtual ~PRole();

  PRole(const PRole& from);

  inline PRole& operator=(const PRole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PRole& default_instance();

  void Swap(PRole* other);

  // implements Message ----------------------------------------------

  PRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PRole& from);
  void MergeFrom(const PRole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // required string roleName = 2;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // required int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 vipLvl = 4;
  inline bool has_viplvl() const;
  inline void clear_viplvl();
  static const int kVipLvlFieldNumber = 4;
  inline ::google::protobuf::int32 viplvl() const;
  inline void set_viplvl(::google::protobuf::int32 value);

  // required int32 coin = 5;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 5;
  inline ::google::protobuf::int32 coin() const;
  inline void set_coin(::google::protobuf::int32 value);

  // required int32 rmb = 6;
  inline bool has_rmb() const;
  inline void clear_rmb();
  static const int kRmbFieldNumber = 6;
  inline ::google::protobuf::int32 rmb() const;
  inline void set_rmb(::google::protobuf::int32 value);

  // required int32 stamina = 7;
  inline bool has_stamina() const;
  inline void clear_stamina();
  static const int kStaminaFieldNumber = 7;
  inline ::google::protobuf::int32 stamina() const;
  inline void set_stamina(::google::protobuf::int32 value);

  // required int32 exp = 8;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 8;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // required int32 groupId = 9;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 9;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PRole)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_viplvl();
  inline void clear_has_viplvl();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_rmb();
  inline void clear_has_rmb();
  inline void set_has_stamina();
  inline void clear_has_stamina();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 roleid_;
  ::std::string* rolename_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 viplvl_;
  ::google::protobuf::int32 coin_;
  ::google::protobuf::int32 rmb_;
  ::google::protobuf::int32 stamina_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static PRole* default_instance_;
};
// -------------------------------------------------------------------

class PUpRole : public ::google::protobuf::Message {
 public:
  PUpRole();
  virtual ~PUpRole();

  PUpRole(const PUpRole& from);

  inline PUpRole& operator=(const PUpRole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PUpRole& default_instance();

  void Swap(PUpRole* other);

  // implements Message ----------------------------------------------

  PUpRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PUpRole& from);
  void MergeFrom(const PUpRole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fieldType = 1;
  inline bool has_fieldtype() const;
  inline void clear_fieldtype();
  static const int kFieldTypeFieldNumber = 1;
  inline ::google::protobuf::int32 fieldtype() const;
  inline void set_fieldtype(::google::protobuf::int32 value);

  // required int32 addValue = 2;
  inline bool has_addvalue() const;
  inline void clear_addvalue();
  static const int kAddValueFieldNumber = 2;
  inline ::google::protobuf::int32 addvalue() const;
  inline void set_addvalue(::google::protobuf::int32 value);

  // required int32 finalValue = 3;
  inline bool has_finalvalue() const;
  inline void clear_finalvalue();
  static const int kFinalValueFieldNumber = 3;
  inline ::google::protobuf::int32 finalvalue() const;
  inline void set_finalvalue(::google::protobuf::int32 value);

  // required string itemType = 4;
  inline bool has_itemtype() const;
  inline void clear_itemtype();
  static const int kItemTypeFieldNumber = 4;
  inline const ::std::string& itemtype() const;
  inline void set_itemtype(const ::std::string& value);
  inline void set_itemtype(const char* value);
  inline void set_itemtype(const char* value, size_t size);
  inline ::std::string* mutable_itemtype();
  inline ::std::string* release_itemtype();
  inline void set_allocated_itemtype(::std::string* itemtype);

  // required int64 updatePkId = 5;
  inline bool has_updatepkid() const;
  inline void clear_updatepkid();
  static const int kUpdatePkIdFieldNumber = 5;
  inline ::google::protobuf::int64 updatepkid() const;
  inline void set_updatepkid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PUpRole)
 private:
  inline void set_has_fieldtype();
  inline void clear_has_fieldtype();
  inline void set_has_addvalue();
  inline void clear_has_addvalue();
  inline void set_has_finalvalue();
  inline void clear_has_finalvalue();
  inline void set_has_itemtype();
  inline void clear_has_itemtype();
  inline void set_has_updatepkid();
  inline void clear_has_updatepkid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fieldtype_;
  ::google::protobuf::int32 addvalue_;
  ::std::string* itemtype_;
  ::google::protobuf::int64 updatepkid_;
  ::google::protobuf::int32 finalvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_account_2eproto();
  friend void protobuf_AssignDesc_account_2eproto();
  friend void protobuf_ShutdownFile_account_2eproto();

  void InitAsDefaultInstance();
  static PUpRole* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginReq

// required string account = 1;
inline bool LoginReq::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginReq::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginReq::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginReq::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& LoginReq::account() const {
  return *account_;
}
inline void LoginReq::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void LoginReq::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void LoginReq::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginReq::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* LoginReq::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginReq::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string key = 2;
inline bool LoginReq::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginReq::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginReq::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginReq::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& LoginReq::key() const {
  return *key_;
}
inline void LoginReq::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void LoginReq::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void LoginReq::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginReq::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* LoginReq::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginReq::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 areaId = 3;
inline bool LoginReq::has_areaid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginReq::set_has_areaid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginReq::clear_has_areaid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginReq::clear_areaid() {
  areaid_ = 0;
  clear_has_areaid();
}
inline ::google::protobuf::int32 LoginReq::areaid() const {
  return areaid_;
}
inline void LoginReq::set_areaid(::google::protobuf::int32 value) {
  set_has_areaid();
  areaid_ = value;
}

// -------------------------------------------------------------------

// PGroup

// required int32 groupId = 1;
inline bool PGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PGroup::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 PGroup::groupid() const {
  return groupid_;
}
inline void PGroup::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// repeated int64 npcId = 2;
inline int PGroup::npcid_size() const {
  return npcid_.size();
}
inline void PGroup::clear_npcid() {
  npcid_.Clear();
}
inline ::google::protobuf::int64 PGroup::npcid(int index) const {
  return npcid_.Get(index);
}
inline void PGroup::set_npcid(int index, ::google::protobuf::int64 value) {
  npcid_.Set(index, value);
}
inline void PGroup::add_npcid(::google::protobuf::int64 value) {
  npcid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PGroup::npcid() const {
  return npcid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PGroup::mutable_npcid() {
  return &npcid_;
}

// -------------------------------------------------------------------

// LoginResp

// required int32 result = 1;
inline bool LoginResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 LoginResp::result() const {
  return result_;
}
inline void LoginResp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .PRole role = 2;
inline bool LoginResp::has_role() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResp::set_has_role() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResp::clear_has_role() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResp::clear_role() {
  if (role_ != NULL) role_->::PRole::Clear();
  clear_has_role();
}
inline const ::PRole& LoginResp::role() const {
  return role_ != NULL ? *role_ : *default_instance_->role_;
}
inline ::PRole* LoginResp::mutable_role() {
  set_has_role();
  if (role_ == NULL) role_ = new ::PRole;
  return role_;
}
inline ::PRole* LoginResp::release_role() {
  clear_has_role();
  ::PRole* temp = role_;
  role_ = NULL;
  return temp;
}
inline void LoginResp::set_allocated_role(::PRole* role) {
  delete role_;
  role_ = role;
  if (role) {
    set_has_role();
  } else {
    clear_has_role();
  }
}

// repeated .PItem itemList = 3;
inline int LoginResp::itemlist_size() const {
  return itemlist_.size();
}
inline void LoginResp::clear_itemlist() {
  itemlist_.Clear();
}
inline const ::PItem& LoginResp::itemlist(int index) const {
  return itemlist_.Get(index);
}
inline ::PItem* LoginResp::mutable_itemlist(int index) {
  return itemlist_.Mutable(index);
}
inline ::PItem* LoginResp::add_itemlist() {
  return itemlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PItem >&
LoginResp::itemlist() const {
  return itemlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PItem >*
LoginResp::mutable_itemlist() {
  return &itemlist_;
}

// repeated .PNpc npcList = 4;
inline int LoginResp::npclist_size() const {
  return npclist_.size();
}
inline void LoginResp::clear_npclist() {
  npclist_.Clear();
}
inline const ::PNpc& LoginResp::npclist(int index) const {
  return npclist_.Get(index);
}
inline ::PNpc* LoginResp::mutable_npclist(int index) {
  return npclist_.Mutable(index);
}
inline ::PNpc* LoginResp::add_npclist() {
  return npclist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PNpc >&
LoginResp::npclist() const {
  return npclist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PNpc >*
LoginResp::mutable_npclist() {
  return &npclist_;
}

// optional .PGateResp gate = 5;
inline bool LoginResp::has_gate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginResp::set_has_gate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginResp::clear_has_gate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginResp::clear_gate() {
  if (gate_ != NULL) gate_->::PGateResp::Clear();
  clear_has_gate();
}
inline const ::PGateResp& LoginResp::gate() const {
  return gate_ != NULL ? *gate_ : *default_instance_->gate_;
}
inline ::PGateResp* LoginResp::mutable_gate() {
  set_has_gate();
  if (gate_ == NULL) gate_ = new ::PGateResp;
  return gate_;
}
inline ::PGateResp* LoginResp::release_gate() {
  clear_has_gate();
  ::PGateResp* temp = gate_;
  gate_ = NULL;
  return temp;
}
inline void LoginResp::set_allocated_gate(::PGateResp* gate) {
  delete gate_;
  gate_ = gate;
  if (gate) {
    set_has_gate();
  } else {
    clear_has_gate();
  }
}

// repeated .PGroup groups = 6;
inline int LoginResp::groups_size() const {
  return groups_.size();
}
inline void LoginResp::clear_groups() {
  groups_.Clear();
}
inline const ::PGroup& LoginResp::groups(int index) const {
  return groups_.Get(index);
}
inline ::PGroup* LoginResp::mutable_groups(int index) {
  return groups_.Mutable(index);
}
inline ::PGroup* LoginResp::add_groups() {
  return groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PGroup >&
LoginResp::groups() const {
  return groups_;
}
inline ::google::protobuf::RepeatedPtrField< ::PGroup >*
LoginResp::mutable_groups() {
  return &groups_;
}

// -------------------------------------------------------------------

// PSaveGroups

// repeated .PGroup groups = 6;
inline int PSaveGroups::groups_size() const {
  return groups_.size();
}
inline void PSaveGroups::clear_groups() {
  groups_.Clear();
}
inline const ::PGroup& PSaveGroups::groups(int index) const {
  return groups_.Get(index);
}
inline ::PGroup* PSaveGroups::mutable_groups(int index) {
  return groups_.Mutable(index);
}
inline ::PGroup* PSaveGroups::add_groups() {
  return groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PGroup >&
PSaveGroups::groups() const {
  return groups_;
}
inline ::google::protobuf::RepeatedPtrField< ::PGroup >*
PSaveGroups::mutable_groups() {
  return &groups_;
}

// -------------------------------------------------------------------

// PRole

// required int64 roleId = 1;
inline bool PRole::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PRole::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PRole::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PRole::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 PRole::roleid() const {
  return roleid_;
}
inline void PRole::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// required string roleName = 2;
inline bool PRole::has_rolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PRole::set_has_rolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PRole::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PRole::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& PRole::rolename() const {
  return *rolename_;
}
inline void PRole::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void PRole::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void PRole::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PRole::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* PRole::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PRole::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 level = 3;
inline bool PRole::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PRole::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PRole::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PRole::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PRole::level() const {
  return level_;
}
inline void PRole::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 vipLvl = 4;
inline bool PRole::has_viplvl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PRole::set_has_viplvl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PRole::clear_has_viplvl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PRole::clear_viplvl() {
  viplvl_ = 0;
  clear_has_viplvl();
}
inline ::google::protobuf::int32 PRole::viplvl() const {
  return viplvl_;
}
inline void PRole::set_viplvl(::google::protobuf::int32 value) {
  set_has_viplvl();
  viplvl_ = value;
}

// required int32 coin = 5;
inline bool PRole::has_coin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PRole::set_has_coin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PRole::clear_has_coin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PRole::clear_coin() {
  coin_ = 0;
  clear_has_coin();
}
inline ::google::protobuf::int32 PRole::coin() const {
  return coin_;
}
inline void PRole::set_coin(::google::protobuf::int32 value) {
  set_has_coin();
  coin_ = value;
}

// required int32 rmb = 6;
inline bool PRole::has_rmb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PRole::set_has_rmb() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PRole::clear_has_rmb() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PRole::clear_rmb() {
  rmb_ = 0;
  clear_has_rmb();
}
inline ::google::protobuf::int32 PRole::rmb() const {
  return rmb_;
}
inline void PRole::set_rmb(::google::protobuf::int32 value) {
  set_has_rmb();
  rmb_ = value;
}

// required int32 stamina = 7;
inline bool PRole::has_stamina() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PRole::set_has_stamina() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PRole::clear_has_stamina() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PRole::clear_stamina() {
  stamina_ = 0;
  clear_has_stamina();
}
inline ::google::protobuf::int32 PRole::stamina() const {
  return stamina_;
}
inline void PRole::set_stamina(::google::protobuf::int32 value) {
  set_has_stamina();
  stamina_ = value;
}

// required int32 exp = 8;
inline bool PRole::has_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PRole::set_has_exp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PRole::clear_has_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PRole::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 PRole::exp() const {
  return exp_;
}
inline void PRole::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// required int32 groupId = 9;
inline bool PRole::has_groupid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PRole::set_has_groupid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PRole::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PRole::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 PRole::groupid() const {
  return groupid_;
}
inline void PRole::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// PUpRole

// required int32 fieldType = 1;
inline bool PUpRole::has_fieldtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PUpRole::set_has_fieldtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PUpRole::clear_has_fieldtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PUpRole::clear_fieldtype() {
  fieldtype_ = 0;
  clear_has_fieldtype();
}
inline ::google::protobuf::int32 PUpRole::fieldtype() const {
  return fieldtype_;
}
inline void PUpRole::set_fieldtype(::google::protobuf::int32 value) {
  set_has_fieldtype();
  fieldtype_ = value;
}

// required int32 addValue = 2;
inline bool PUpRole::has_addvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PUpRole::set_has_addvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PUpRole::clear_has_addvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PUpRole::clear_addvalue() {
  addvalue_ = 0;
  clear_has_addvalue();
}
inline ::google::protobuf::int32 PUpRole::addvalue() const {
  return addvalue_;
}
inline void PUpRole::set_addvalue(::google::protobuf::int32 value) {
  set_has_addvalue();
  addvalue_ = value;
}

// required int32 finalValue = 3;
inline bool PUpRole::has_finalvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PUpRole::set_has_finalvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PUpRole::clear_has_finalvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PUpRole::clear_finalvalue() {
  finalvalue_ = 0;
  clear_has_finalvalue();
}
inline ::google::protobuf::int32 PUpRole::finalvalue() const {
  return finalvalue_;
}
inline void PUpRole::set_finalvalue(::google::protobuf::int32 value) {
  set_has_finalvalue();
  finalvalue_ = value;
}

// required string itemType = 4;
inline bool PUpRole::has_itemtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PUpRole::set_has_itemtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PUpRole::clear_has_itemtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PUpRole::clear_itemtype() {
  if (itemtype_ != &::google::protobuf::internal::kEmptyString) {
    itemtype_->clear();
  }
  clear_has_itemtype();
}
inline const ::std::string& PUpRole::itemtype() const {
  return *itemtype_;
}
inline void PUpRole::set_itemtype(const ::std::string& value) {
  set_has_itemtype();
  if (itemtype_ == &::google::protobuf::internal::kEmptyString) {
    itemtype_ = new ::std::string;
  }
  itemtype_->assign(value);
}
inline void PUpRole::set_itemtype(const char* value) {
  set_has_itemtype();
  if (itemtype_ == &::google::protobuf::internal::kEmptyString) {
    itemtype_ = new ::std::string;
  }
  itemtype_->assign(value);
}
inline void PUpRole::set_itemtype(const char* value, size_t size) {
  set_has_itemtype();
  if (itemtype_ == &::google::protobuf::internal::kEmptyString) {
    itemtype_ = new ::std::string;
  }
  itemtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PUpRole::mutable_itemtype() {
  set_has_itemtype();
  if (itemtype_ == &::google::protobuf::internal::kEmptyString) {
    itemtype_ = new ::std::string;
  }
  return itemtype_;
}
inline ::std::string* PUpRole::release_itemtype() {
  clear_has_itemtype();
  if (itemtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = itemtype_;
    itemtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PUpRole::set_allocated_itemtype(::std::string* itemtype) {
  if (itemtype_ != &::google::protobuf::internal::kEmptyString) {
    delete itemtype_;
  }
  if (itemtype) {
    set_has_itemtype();
    itemtype_ = itemtype;
  } else {
    clear_has_itemtype();
    itemtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 updatePkId = 5;
inline bool PUpRole::has_updatepkid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PUpRole::set_has_updatepkid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PUpRole::clear_has_updatepkid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PUpRole::clear_updatepkid() {
  updatepkid_ = GOOGLE_LONGLONG(0);
  clear_has_updatepkid();
}
inline ::google::protobuf::int64 PUpRole::updatepkid() const {
  return updatepkid_;
}
inline void PUpRole::set_updatepkid(::google::protobuf::int64 value) {
  set_has_updatepkid();
  updatepkid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_account_2eproto__INCLUDED
