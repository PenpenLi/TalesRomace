// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battle.proto

#ifndef PROTOBUF_battle_2eproto__INCLUDED
#define PROTOBUF_battle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_battle_2eproto();
void protobuf_AssignDesc_battle_2eproto();
void protobuf_ShutdownFile_battle_2eproto();

class PBattle;
class PFightItem;
class PRound;
class Phurt;
class PTarget;

// ===================================================================

class PBattle : public ::google::protobuf::Message {
 public:
  PBattle();
  virtual ~PBattle();

  PBattle(const PBattle& from);

  inline PBattle& operator=(const PBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBattle& default_instance();

  void Swap(PBattle* other);

  // implements Message ----------------------------------------------

  PBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBattle& from);
  void MergeFrom(const PBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PFightItem heros = 1;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 1;
  inline const ::PFightItem& heros(int index) const;
  inline ::PFightItem* mutable_heros(int index);
  inline ::PFightItem* add_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::PFightItem >&
      heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::PFightItem >*
      mutable_heros();

  // repeated .PRound rounds = 2;
  inline int rounds_size() const;
  inline void clear_rounds();
  static const int kRoundsFieldNumber = 2;
  inline const ::PRound& rounds(int index) const;
  inline ::PRound* mutable_rounds(int index);
  inline ::PRound* add_rounds();
  inline const ::google::protobuf::RepeatedPtrField< ::PRound >&
      rounds() const;
  inline ::google::protobuf::RepeatedPtrField< ::PRound >*
      mutable_rounds();

  // repeated int32 cards = 3;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 3;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // required int32 gold = 4;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 4;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // required int64 winnerID = 5;
  inline bool has_winnerid() const;
  inline void clear_winnerid();
  static const int kWinnerIDFieldNumber = 5;
  inline ::google::protobuf::int64 winnerid() const;
  inline void set_winnerid(::google::protobuf::int64 value);

  // required int32 type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBattle)
 private:
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_winnerid();
  inline void clear_has_winnerid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PFightItem > heros_;
  ::google::protobuf::RepeatedPtrField< ::PRound > rounds_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::int64 winnerid_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2eproto();
  friend void protobuf_AssignDesc_battle_2eproto();
  friend void protobuf_ShutdownFile_battle_2eproto();

  void InitAsDefaultInstance();
  static PBattle* default_instance_;
};
// -------------------------------------------------------------------

class PFightItem : public ::google::protobuf::Message {
 public:
  PFightItem();
  virtual ~PFightItem();

  PFightItem(const PFightItem& from);

  inline PFightItem& operator=(const PFightItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PFightItem& default_instance();

  void Swap(PFightItem* other);

  // implements Message ----------------------------------------------

  PFightItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PFightItem& from);
  void MergeFrom(const PFightItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // required int32 hp = 2;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 2;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 xid = 4;
  inline bool has_xid() const;
  inline void clear_xid();
  static const int kXidFieldNumber = 4;
  inline ::google::protobuf::int32 xid() const;
  inline void set_xid(::google::protobuf::int32 value);

  // required int64 friendID = 5;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendIDFieldNumber = 5;
  inline ::google::protobuf::int64 friendid() const;
  inline void set_friendid(::google::protobuf::int64 value);

  // required string friendName = 6;
  inline bool has_friendname() const;
  inline void clear_friendname();
  static const int kFriendNameFieldNumber = 6;
  inline const ::std::string& friendname() const;
  inline void set_friendname(const ::std::string& value);
  inline void set_friendname(const char* value);
  inline void set_friendname(const char* value, size_t size);
  inline ::std::string* mutable_friendname();
  inline ::std::string* release_friendname();
  inline void set_allocated_friendname(::std::string* friendname);

  // required int32 friendXid = 7;
  inline bool has_friendxid() const;
  inline void clear_friendxid();
  static const int kFriendXidFieldNumber = 7;
  inline ::google::protobuf::int32 friendxid() const;
  inline void set_friendxid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PFightItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_xid();
  inline void clear_has_xid();
  inline void set_has_friendid();
  inline void clear_has_friendid();
  inline void set_has_friendname();
  inline void clear_has_friendname();
  inline void set_has_friendxid();
  inline void clear_has_friendxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 xid_;
  ::google::protobuf::int64 friendid_;
  ::std::string* friendname_;
  ::google::protobuf::int32 friendxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2eproto();
  friend void protobuf_AssignDesc_battle_2eproto();
  friend void protobuf_ShutdownFile_battle_2eproto();

  void InitAsDefaultInstance();
  static PFightItem* default_instance_;
};
// -------------------------------------------------------------------

class PRound : public ::google::protobuf::Message {
 public:
  PRound();
  virtual ~PRound();

  PRound(const PRound& from);

  inline PRound& operator=(const PRound& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PRound& default_instance();

  void Swap(PRound* other);

  // implements Message ----------------------------------------------

  PRound* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PRound& from);
  void MergeFrom(const PRound& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline ::google::protobuf::int32 source() const;
  inline void set_source(::google::protobuf::int32 value);

  // required bool isSkip = 2;
  inline bool has_isskip() const;
  inline void clear_isskip();
  static const int kIsSkipFieldNumber = 2;
  inline bool isskip() const;
  inline void set_isskip(bool value);

  // repeated .Phurt cards = 3;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 3;
  inline const ::Phurt& cards(int index) const;
  inline ::Phurt* mutable_cards(int index);
  inline ::Phurt* add_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::Phurt >&
      cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::Phurt >*
      mutable_cards();

  // optional int32 aoyiSkillID = 4;
  inline bool has_aoyiskillid() const;
  inline void clear_aoyiskillid();
  static const int kAoyiSkillIDFieldNumber = 4;
  inline ::google::protobuf::int32 aoyiskillid() const;
  inline void set_aoyiskillid(::google::protobuf::int32 value);

  // repeated string leftIcons = 5;
  inline int lefticons_size() const;
  inline void clear_lefticons();
  static const int kLeftIconsFieldNumber = 5;
  inline const ::std::string& lefticons(int index) const;
  inline ::std::string* mutable_lefticons(int index);
  inline void set_lefticons(int index, const ::std::string& value);
  inline void set_lefticons(int index, const char* value);
  inline void set_lefticons(int index, const char* value, size_t size);
  inline ::std::string* add_lefticons();
  inline void add_lefticons(const ::std::string& value);
  inline void add_lefticons(const char* value);
  inline void add_lefticons(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& lefticons() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_lefticons();

  // repeated int32 leftStates = 6;
  inline int leftstates_size() const;
  inline void clear_leftstates();
  static const int kLeftStatesFieldNumber = 6;
  inline ::google::protobuf::int32 leftstates(int index) const;
  inline void set_leftstates(int index, ::google::protobuf::int32 value);
  inline void add_leftstates(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      leftstates() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_leftstates();

  // repeated int32 buffHps = 7;
  inline int buffhps_size() const;
  inline void clear_buffhps();
  static const int kBuffHpsFieldNumber = 7;
  inline ::google::protobuf::int32 buffhps(int index) const;
  inline void set_buffhps(int index, ::google::protobuf::int32 value);
  inline void add_buffhps(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      buffhps() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_buffhps();

  // required int32 leftHp = 8;
  inline bool has_lefthp() const;
  inline void clear_lefthp();
  static const int kLeftHpFieldNumber = 8;
  inline ::google::protobuf::int32 lefthp() const;
  inline void set_lefthp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PRound)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_isskip();
  inline void clear_has_isskip();
  inline void set_has_aoyiskillid();
  inline void clear_has_aoyiskillid();
  inline void set_has_lefthp();
  inline void clear_has_lefthp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 source_;
  bool isskip_;
  ::google::protobuf::RepeatedPtrField< ::Phurt > cards_;
  ::google::protobuf::RepeatedPtrField< ::std::string> lefticons_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > leftstates_;
  ::google::protobuf::int32 aoyiskillid_;
  ::google::protobuf::int32 lefthp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > buffhps_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2eproto();
  friend void protobuf_AssignDesc_battle_2eproto();
  friend void protobuf_ShutdownFile_battle_2eproto();

  void InitAsDefaultInstance();
  static PRound* default_instance_;
};
// -------------------------------------------------------------------

class Phurt : public ::google::protobuf::Message {
 public:
  Phurt();
  virtual ~Phurt();

  Phurt(const Phurt& from);

  inline Phurt& operator=(const Phurt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Phurt& default_instance();

  void Swap(Phurt* other);

  // implements Message ----------------------------------------------

  Phurt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Phurt& from);
  void MergeFrom(const Phurt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 card = 1;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 1;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // required bool skillID = 2;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 2;
  inline bool skillid() const;
  inline void set_skillid(bool value);

  // repeated .PTarget targets = 3;
  inline int targets_size() const;
  inline void clear_targets();
  static const int kTargetsFieldNumber = 3;
  inline const ::PTarget& targets(int index) const;
  inline ::PTarget* mutable_targets(int index);
  inline ::PTarget* add_targets();
  inline const ::google::protobuf::RepeatedPtrField< ::PTarget >&
      targets() const;
  inline ::google::protobuf::RepeatedPtrField< ::PTarget >*
      mutable_targets();

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 star = 5;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 5;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Phurt)
 private:
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_star();
  inline void clear_has_star();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 card_;
  bool skillid_;
  ::google::protobuf::RepeatedPtrField< ::PTarget > targets_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 star_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2eproto();
  friend void protobuf_AssignDesc_battle_2eproto();
  friend void protobuf_ShutdownFile_battle_2eproto();

  void InitAsDefaultInstance();
  static Phurt* default_instance_;
};
// -------------------------------------------------------------------

class PTarget : public ::google::protobuf::Message {
 public:
  PTarget();
  virtual ~PTarget();

  PTarget(const PTarget& from);

  inline PTarget& operator=(const PTarget& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PTarget& default_instance();

  void Swap(PTarget* other);

  // implements Message ----------------------------------------------

  PTarget* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PTarget& from);
  void MergeFrom(const PTarget& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 targetID = 1;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIDFieldNumber = 1;
  inline ::google::protobuf::int32 targetid() const;
  inline void set_targetid(::google::protobuf::int32 value);

  // repeated int32 state = 2;
  inline int state_size() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state(int index) const;
  inline void set_state(int index, ::google::protobuf::int32 value);
  inline void add_state(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      state() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_state();

  // repeated string buffIcon = 3;
  inline int bufficon_size() const;
  inline void clear_bufficon();
  static const int kBuffIconFieldNumber = 3;
  inline const ::std::string& bufficon(int index) const;
  inline ::std::string* mutable_bufficon(int index);
  inline void set_bufficon(int index, const ::std::string& value);
  inline void set_bufficon(int index, const char* value);
  inline void set_bufficon(int index, const char* value, size_t size);
  inline ::std::string* add_bufficon();
  inline void add_bufficon(const ::std::string& value);
  inline void add_bufficon(const char* value);
  inline void add_bufficon(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bufficon() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bufficon();

  // required int32 hp = 4;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 4;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // required int32 leftHp = 5;
  inline bool has_lefthp() const;
  inline void clear_lefthp();
  static const int kLeftHpFieldNumber = 5;
  inline ::google::protobuf::int32 lefthp() const;
  inline void set_lefthp(::google::protobuf::int32 value);

  // required int32 hpTypes = 6;
  inline bool has_hptypes() const;
  inline void clear_hptypes();
  static const int kHpTypesFieldNumber = 6;
  inline ::google::protobuf::int32 hptypes() const;
  inline void set_hptypes(::google::protobuf::int32 value);

  // required int32 skillID = 7;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 7;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PTarget)
 private:
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_lefthp();
  inline void clear_has_lefthp();
  inline void set_has_hptypes();
  inline void clear_has_hptypes();
  inline void set_has_skillid();
  inline void clear_has_skillid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > state_;
  ::google::protobuf::int32 targetid_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bufficon_;
  ::google::protobuf::int32 lefthp_;
  ::google::protobuf::int32 hptypes_;
  ::google::protobuf::int32 skillid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_battle_2eproto();
  friend void protobuf_AssignDesc_battle_2eproto();
  friend void protobuf_ShutdownFile_battle_2eproto();

  void InitAsDefaultInstance();
  static PTarget* default_instance_;
};
// ===================================================================


// ===================================================================

// PBattle

// repeated .PFightItem heros = 1;
inline int PBattle::heros_size() const {
  return heros_.size();
}
inline void PBattle::clear_heros() {
  heros_.Clear();
}
inline const ::PFightItem& PBattle::heros(int index) const {
  return heros_.Get(index);
}
inline ::PFightItem* PBattle::mutable_heros(int index) {
  return heros_.Mutable(index);
}
inline ::PFightItem* PBattle::add_heros() {
  return heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PFightItem >&
PBattle::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::PFightItem >*
PBattle::mutable_heros() {
  return &heros_;
}

// repeated .PRound rounds = 2;
inline int PBattle::rounds_size() const {
  return rounds_.size();
}
inline void PBattle::clear_rounds() {
  rounds_.Clear();
}
inline const ::PRound& PBattle::rounds(int index) const {
  return rounds_.Get(index);
}
inline ::PRound* PBattle::mutable_rounds(int index) {
  return rounds_.Mutable(index);
}
inline ::PRound* PBattle::add_rounds() {
  return rounds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PRound >&
PBattle::rounds() const {
  return rounds_;
}
inline ::google::protobuf::RepeatedPtrField< ::PRound >*
PBattle::mutable_rounds() {
  return &rounds_;
}

// repeated int32 cards = 3;
inline int PBattle::cards_size() const {
  return cards_.size();
}
inline void PBattle::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 PBattle::cards(int index) const {
  return cards_.Get(index);
}
inline void PBattle::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
}
inline void PBattle::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PBattle::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PBattle::mutable_cards() {
  return &cards_;
}

// required int32 gold = 4;
inline bool PBattle::has_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBattle::set_has_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBattle::clear_has_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBattle::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 PBattle::gold() const {
  return gold_;
}
inline void PBattle::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// required int64 winnerID = 5;
inline bool PBattle::has_winnerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBattle::set_has_winnerid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBattle::clear_has_winnerid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBattle::clear_winnerid() {
  winnerid_ = GOOGLE_LONGLONG(0);
  clear_has_winnerid();
}
inline ::google::protobuf::int64 PBattle::winnerid() const {
  return winnerid_;
}
inline void PBattle::set_winnerid(::google::protobuf::int64 value) {
  set_has_winnerid();
  winnerid_ = value;
}

// required int32 type = 6;
inline bool PBattle::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBattle::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBattle::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBattle::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 PBattle::type() const {
  return type_;
}
inline void PBattle::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// PFightItem

// required int64 id = 1;
inline bool PFightItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PFightItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PFightItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PFightItem::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PFightItem::id() const {
  return id_;
}
inline void PFightItem::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// required int32 hp = 2;
inline bool PFightItem::has_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PFightItem::set_has_hp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PFightItem::clear_has_hp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PFightItem::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 PFightItem::hp() const {
  return hp_;
}
inline void PFightItem::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// required string name = 3;
inline bool PFightItem::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PFightItem::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PFightItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PFightItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PFightItem::name() const {
  return *name_;
}
inline void PFightItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PFightItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PFightItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PFightItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PFightItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PFightItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 xid = 4;
inline bool PFightItem::has_xid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PFightItem::set_has_xid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PFightItem::clear_has_xid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PFightItem::clear_xid() {
  xid_ = 0;
  clear_has_xid();
}
inline ::google::protobuf::int32 PFightItem::xid() const {
  return xid_;
}
inline void PFightItem::set_xid(::google::protobuf::int32 value) {
  set_has_xid();
  xid_ = value;
}

// required int64 friendID = 5;
inline bool PFightItem::has_friendid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PFightItem::set_has_friendid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PFightItem::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PFightItem::clear_friendid() {
  friendid_ = GOOGLE_LONGLONG(0);
  clear_has_friendid();
}
inline ::google::protobuf::int64 PFightItem::friendid() const {
  return friendid_;
}
inline void PFightItem::set_friendid(::google::protobuf::int64 value) {
  set_has_friendid();
  friendid_ = value;
}

// required string friendName = 6;
inline bool PFightItem::has_friendname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PFightItem::set_has_friendname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PFightItem::clear_has_friendname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PFightItem::clear_friendname() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    friendname_->clear();
  }
  clear_has_friendname();
}
inline const ::std::string& PFightItem::friendname() const {
  return *friendname_;
}
inline void PFightItem::set_friendname(const ::std::string& value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void PFightItem::set_friendname(const char* value) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(value);
}
inline void PFightItem::set_friendname(const char* value, size_t size) {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  friendname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PFightItem::mutable_friendname() {
  set_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    friendname_ = new ::std::string;
  }
  return friendname_;
}
inline ::std::string* PFightItem::release_friendname() {
  clear_has_friendname();
  if (friendname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = friendname_;
    friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PFightItem::set_allocated_friendname(::std::string* friendname) {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (friendname) {
    set_has_friendname();
    friendname_ = friendname;
  } else {
    clear_has_friendname();
    friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 friendXid = 7;
inline bool PFightItem::has_friendxid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PFightItem::set_has_friendxid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PFightItem::clear_has_friendxid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PFightItem::clear_friendxid() {
  friendxid_ = 0;
  clear_has_friendxid();
}
inline ::google::protobuf::int32 PFightItem::friendxid() const {
  return friendxid_;
}
inline void PFightItem::set_friendxid(::google::protobuf::int32 value) {
  set_has_friendxid();
  friendxid_ = value;
}

// -------------------------------------------------------------------

// PRound

// required int32 source = 1;
inline bool PRound::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PRound::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PRound::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PRound::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::google::protobuf::int32 PRound::source() const {
  return source_;
}
inline void PRound::set_source(::google::protobuf::int32 value) {
  set_has_source();
  source_ = value;
}

// required bool isSkip = 2;
inline bool PRound::has_isskip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PRound::set_has_isskip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PRound::clear_has_isskip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PRound::clear_isskip() {
  isskip_ = false;
  clear_has_isskip();
}
inline bool PRound::isskip() const {
  return isskip_;
}
inline void PRound::set_isskip(bool value) {
  set_has_isskip();
  isskip_ = value;
}

// repeated .Phurt cards = 3;
inline int PRound::cards_size() const {
  return cards_.size();
}
inline void PRound::clear_cards() {
  cards_.Clear();
}
inline const ::Phurt& PRound::cards(int index) const {
  return cards_.Get(index);
}
inline ::Phurt* PRound::mutable_cards(int index) {
  return cards_.Mutable(index);
}
inline ::Phurt* PRound::add_cards() {
  return cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Phurt >&
PRound::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::Phurt >*
PRound::mutable_cards() {
  return &cards_;
}

// optional int32 aoyiSkillID = 4;
inline bool PRound::has_aoyiskillid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PRound::set_has_aoyiskillid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PRound::clear_has_aoyiskillid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PRound::clear_aoyiskillid() {
  aoyiskillid_ = 0;
  clear_has_aoyiskillid();
}
inline ::google::protobuf::int32 PRound::aoyiskillid() const {
  return aoyiskillid_;
}
inline void PRound::set_aoyiskillid(::google::protobuf::int32 value) {
  set_has_aoyiskillid();
  aoyiskillid_ = value;
}

// repeated string leftIcons = 5;
inline int PRound::lefticons_size() const {
  return lefticons_.size();
}
inline void PRound::clear_lefticons() {
  lefticons_.Clear();
}
inline const ::std::string& PRound::lefticons(int index) const {
  return lefticons_.Get(index);
}
inline ::std::string* PRound::mutable_lefticons(int index) {
  return lefticons_.Mutable(index);
}
inline void PRound::set_lefticons(int index, const ::std::string& value) {
  lefticons_.Mutable(index)->assign(value);
}
inline void PRound::set_lefticons(int index, const char* value) {
  lefticons_.Mutable(index)->assign(value);
}
inline void PRound::set_lefticons(int index, const char* value, size_t size) {
  lefticons_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PRound::add_lefticons() {
  return lefticons_.Add();
}
inline void PRound::add_lefticons(const ::std::string& value) {
  lefticons_.Add()->assign(value);
}
inline void PRound::add_lefticons(const char* value) {
  lefticons_.Add()->assign(value);
}
inline void PRound::add_lefticons(const char* value, size_t size) {
  lefticons_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PRound::lefticons() const {
  return lefticons_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PRound::mutable_lefticons() {
  return &lefticons_;
}

// repeated int32 leftStates = 6;
inline int PRound::leftstates_size() const {
  return leftstates_.size();
}
inline void PRound::clear_leftstates() {
  leftstates_.Clear();
}
inline ::google::protobuf::int32 PRound::leftstates(int index) const {
  return leftstates_.Get(index);
}
inline void PRound::set_leftstates(int index, ::google::protobuf::int32 value) {
  leftstates_.Set(index, value);
}
inline void PRound::add_leftstates(::google::protobuf::int32 value) {
  leftstates_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PRound::leftstates() const {
  return leftstates_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PRound::mutable_leftstates() {
  return &leftstates_;
}

// repeated int32 buffHps = 7;
inline int PRound::buffhps_size() const {
  return buffhps_.size();
}
inline void PRound::clear_buffhps() {
  buffhps_.Clear();
}
inline ::google::protobuf::int32 PRound::buffhps(int index) const {
  return buffhps_.Get(index);
}
inline void PRound::set_buffhps(int index, ::google::protobuf::int32 value) {
  buffhps_.Set(index, value);
}
inline void PRound::add_buffhps(::google::protobuf::int32 value) {
  buffhps_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PRound::buffhps() const {
  return buffhps_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PRound::mutable_buffhps() {
  return &buffhps_;
}

// required int32 leftHp = 8;
inline bool PRound::has_lefthp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PRound::set_has_lefthp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PRound::clear_has_lefthp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PRound::clear_lefthp() {
  lefthp_ = 0;
  clear_has_lefthp();
}
inline ::google::protobuf::int32 PRound::lefthp() const {
  return lefthp_;
}
inline void PRound::set_lefthp(::google::protobuf::int32 value) {
  set_has_lefthp();
  lefthp_ = value;
}

// -------------------------------------------------------------------

// Phurt

// optional int32 card = 1;
inline bool Phurt::has_card() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Phurt::set_has_card() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Phurt::clear_has_card() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Phurt::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 Phurt::card() const {
  return card_;
}
inline void Phurt::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
}

// required bool skillID = 2;
inline bool Phurt::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Phurt::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Phurt::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Phurt::clear_skillid() {
  skillid_ = false;
  clear_has_skillid();
}
inline bool Phurt::skillid() const {
  return skillid_;
}
inline void Phurt::set_skillid(bool value) {
  set_has_skillid();
  skillid_ = value;
}

// repeated .PTarget targets = 3;
inline int Phurt::targets_size() const {
  return targets_.size();
}
inline void Phurt::clear_targets() {
  targets_.Clear();
}
inline const ::PTarget& Phurt::targets(int index) const {
  return targets_.Get(index);
}
inline ::PTarget* Phurt::mutable_targets(int index) {
  return targets_.Mutable(index);
}
inline ::PTarget* Phurt::add_targets() {
  return targets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PTarget >&
Phurt::targets() const {
  return targets_;
}
inline ::google::protobuf::RepeatedPtrField< ::PTarget >*
Phurt::mutable_targets() {
  return &targets_;
}

// optional int32 level = 4;
inline bool Phurt::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Phurt::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Phurt::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Phurt::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Phurt::level() const {
  return level_;
}
inline void Phurt::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 star = 5;
inline bool Phurt::has_star() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Phurt::set_has_star() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Phurt::clear_has_star() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Phurt::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 Phurt::star() const {
  return star_;
}
inline void Phurt::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// -------------------------------------------------------------------

// PTarget

// required int32 targetID = 1;
inline bool PTarget::has_targetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PTarget::set_has_targetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PTarget::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PTarget::clear_targetid() {
  targetid_ = 0;
  clear_has_targetid();
}
inline ::google::protobuf::int32 PTarget::targetid() const {
  return targetid_;
}
inline void PTarget::set_targetid(::google::protobuf::int32 value) {
  set_has_targetid();
  targetid_ = value;
}

// repeated int32 state = 2;
inline int PTarget::state_size() const {
  return state_.size();
}
inline void PTarget::clear_state() {
  state_.Clear();
}
inline ::google::protobuf::int32 PTarget::state(int index) const {
  return state_.Get(index);
}
inline void PTarget::set_state(int index, ::google::protobuf::int32 value) {
  state_.Set(index, value);
}
inline void PTarget::add_state(::google::protobuf::int32 value) {
  state_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PTarget::state() const {
  return state_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PTarget::mutable_state() {
  return &state_;
}

// repeated string buffIcon = 3;
inline int PTarget::bufficon_size() const {
  return bufficon_.size();
}
inline void PTarget::clear_bufficon() {
  bufficon_.Clear();
}
inline const ::std::string& PTarget::bufficon(int index) const {
  return bufficon_.Get(index);
}
inline ::std::string* PTarget::mutable_bufficon(int index) {
  return bufficon_.Mutable(index);
}
inline void PTarget::set_bufficon(int index, const ::std::string& value) {
  bufficon_.Mutable(index)->assign(value);
}
inline void PTarget::set_bufficon(int index, const char* value) {
  bufficon_.Mutable(index)->assign(value);
}
inline void PTarget::set_bufficon(int index, const char* value, size_t size) {
  bufficon_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PTarget::add_bufficon() {
  return bufficon_.Add();
}
inline void PTarget::add_bufficon(const ::std::string& value) {
  bufficon_.Add()->assign(value);
}
inline void PTarget::add_bufficon(const char* value) {
  bufficon_.Add()->assign(value);
}
inline void PTarget::add_bufficon(const char* value, size_t size) {
  bufficon_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PTarget::bufficon() const {
  return bufficon_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PTarget::mutable_bufficon() {
  return &bufficon_;
}

// required int32 hp = 4;
inline bool PTarget::has_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PTarget::set_has_hp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PTarget::clear_has_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PTarget::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 PTarget::hp() const {
  return hp_;
}
inline void PTarget::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// required int32 leftHp = 5;
inline bool PTarget::has_lefthp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PTarget::set_has_lefthp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PTarget::clear_has_lefthp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PTarget::clear_lefthp() {
  lefthp_ = 0;
  clear_has_lefthp();
}
inline ::google::protobuf::int32 PTarget::lefthp() const {
  return lefthp_;
}
inline void PTarget::set_lefthp(::google::protobuf::int32 value) {
  set_has_lefthp();
  lefthp_ = value;
}

// required int32 hpTypes = 6;
inline bool PTarget::has_hptypes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PTarget::set_has_hptypes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PTarget::clear_has_hptypes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PTarget::clear_hptypes() {
  hptypes_ = 0;
  clear_has_hptypes();
}
inline ::google::protobuf::int32 PTarget::hptypes() const {
  return hptypes_;
}
inline void PTarget::set_hptypes(::google::protobuf::int32 value) {
  set_has_hptypes();
  hptypes_ = value;
}

// required int32 skillID = 7;
inline bool PTarget::has_skillid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PTarget::set_has_skillid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PTarget::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PTarget::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 PTarget::skillid() const {
  return skillid_;
}
inline void PTarget::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_battle_2eproto__INCLUDED
